// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sort_knn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        knn_set_0_0_V_read,
        knn_set_0_1_V_read,
        knn_set_0_2_V_read,
        knn_set_1_0_V_read,
        knn_set_1_1_V_read,
        knn_set_1_2_V_read,
        knn_set_2_0_V_read,
        knn_set_2_1_V_read,
        knn_set_2_2_V_read,
        knn_set_3_0_V_read,
        knn_set_3_1_V_read,
        knn_set_3_2_V_read,
        knn_set_4_0_V_read,
        knn_set_4_1_V_read,
        knn_set_4_2_V_read,
        knn_set_5_0_V_read,
        knn_set_5_1_V_read,
        knn_set_5_2_V_read,
        knn_set_6_0_V_read,
        knn_set_6_1_V_read,
        knn_set_6_2_V_read,
        knn_set_7_0_V_read,
        knn_set_7_1_V_read,
        knn_set_7_2_V_read,
        knn_set_8_0_V_read,
        knn_set_8_1_V_read,
        knn_set_8_2_V_read,
        knn_set_9_0_V_read,
        knn_set_9_1_V_read,
        knn_set_9_2_V_read,
        sorted_distances_V_address0,
        sorted_distances_V_ce0,
        sorted_distances_V_we0,
        sorted_distances_V_d0,
        sorted_distances_V_q0,
        sorted_distances_V_address1,
        sorted_distances_V_ce1,
        sorted_distances_V_we1,
        sorted_distances_V_d1,
        sorted_distances_V_q1,
        sorted_labels_V_address0,
        sorted_labels_V_ce0,
        sorted_labels_V_we0,
        sorted_labels_V_d0,
        sorted_labels_V_q0,
        sorted_labels_V_address1,
        sorted_labels_V_ce1,
        sorted_labels_V_we1,
        sorted_labels_V_d1,
        sorted_labels_V_q1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] knn_set_0_0_V_read;
input  [5:0] knn_set_0_1_V_read;
input  [5:0] knn_set_0_2_V_read;
input  [5:0] knn_set_1_0_V_read;
input  [5:0] knn_set_1_1_V_read;
input  [5:0] knn_set_1_2_V_read;
input  [5:0] knn_set_2_0_V_read;
input  [5:0] knn_set_2_1_V_read;
input  [5:0] knn_set_2_2_V_read;
input  [5:0] knn_set_3_0_V_read;
input  [5:0] knn_set_3_1_V_read;
input  [5:0] knn_set_3_2_V_read;
input  [5:0] knn_set_4_0_V_read;
input  [5:0] knn_set_4_1_V_read;
input  [5:0] knn_set_4_2_V_read;
input  [5:0] knn_set_5_0_V_read;
input  [5:0] knn_set_5_1_V_read;
input  [5:0] knn_set_5_2_V_read;
input  [5:0] knn_set_6_0_V_read;
input  [5:0] knn_set_6_1_V_read;
input  [5:0] knn_set_6_2_V_read;
input  [5:0] knn_set_7_0_V_read;
input  [5:0] knn_set_7_1_V_read;
input  [5:0] knn_set_7_2_V_read;
input  [5:0] knn_set_8_0_V_read;
input  [5:0] knn_set_8_1_V_read;
input  [5:0] knn_set_8_2_V_read;
input  [5:0] knn_set_9_0_V_read;
input  [5:0] knn_set_9_1_V_read;
input  [5:0] knn_set_9_2_V_read;
output  [4:0] sorted_distances_V_address0;
output   sorted_distances_V_ce0;
output   sorted_distances_V_we0;
output  [5:0] sorted_distances_V_d0;
input  [5:0] sorted_distances_V_q0;
output  [4:0] sorted_distances_V_address1;
output   sorted_distances_V_ce1;
output   sorted_distances_V_we1;
output  [5:0] sorted_distances_V_d1;
input  [5:0] sorted_distances_V_q1;
output  [4:0] sorted_labels_V_address0;
output   sorted_labels_V_ce0;
output   sorted_labels_V_we0;
output  [3:0] sorted_labels_V_d0;
input  [3:0] sorted_labels_V_q0;
output  [4:0] sorted_labels_V_address1;
output   sorted_labels_V_ce1;
output   sorted_labels_V_we1;
output  [3:0] sorted_labels_V_d1;
input  [3:0] sorted_labels_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] sorted_distances_V_address0;
reg sorted_distances_V_ce0;
reg sorted_distances_V_we0;
reg[5:0] sorted_distances_V_d0;
reg[4:0] sorted_distances_V_address1;
reg sorted_distances_V_ce1;
reg sorted_distances_V_we1;
reg[4:0] sorted_labels_V_address0;
reg sorted_labels_V_ce0;
reg sorted_labels_V_we0;
reg[3:0] sorted_labels_V_d0;
reg[4:0] sorted_labels_V_address1;
reg sorted_labels_V_ce1;
reg sorted_labels_V_we1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_V_fu_420_p2;
reg   [3:0] i_V_reg_744;
wire    ap_CS_fsm_state2;
wire   [36:0] lhs_V_fu_452_p1;
reg   [36:0] lhs_V_reg_749;
wire   [0:0] icmp_ln887_fu_414_p2;
wire   [4:0] sub_ln321_fu_472_p2;
reg   [4:0] sub_ln321_reg_754;
wire   [1:0] j_fu_484_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] i_fu_557_p2;
reg   [4:0] i_reg_770;
wire    ap_CS_fsm_state4;
wire   [4:0] j_1_fu_569_p2;
reg   [4:0] j_1_reg_778;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln131_fu_575_p1;
reg   [63:0] zext_ln131_reg_783;
wire   [0:0] icmp_ln130_fu_563_p2;
wire   [63:0] zext_ln131_1_fu_580_p1;
reg   [63:0] zext_ln131_1_reg_788;
reg   [4:0] sorted_distances_V_a_1_reg_793;
reg   [4:0] sorted_distances_V_a_2_reg_798;
wire   [0:0] icmp_ln895_fu_585_p2;
reg   [0:0] icmp_ln895_reg_803;
wire    ap_CS_fsm_state6;
reg   [4:0] sorted_labels_V_addr_1_reg_807;
reg   [4:0] sorted_labels_V_addr_2_reg_813;
reg   [3:0] t_V_reg_368;
wire   [0:0] icmp_ln121_fu_478_p2;
reg   [1:0] i_op_assign_reg_381;
reg   [4:0] i1_0_reg_392;
reg   [4:0] j2_0_reg_403;
wire   [0:0] icmp_ln129_fu_551_p2;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln544_fu_499_p1;
wire   [5:0] tmp_2_fu_514_p32;
wire   [5:0] shl_ln_fu_430_p3;
wire   [6:0] zext_ln1352_1_fu_438_p1;
wire   [6:0] zext_ln1352_fu_426_p1;
wire   [6:0] ret_V_fu_442_p2;
wire  signed [35:0] sext_ln1352_fu_448_p1;
wire   [2:0] trunc_ln321_fu_460_p1;
wire   [4:0] shl_ln1_fu_464_p3;
wire   [4:0] zext_ln321_fu_456_p1;
wire   [36:0] rhs_V_fu_490_p1;
wire   [36:0] ret_V_1_fu_494_p2;
wire   [4:0] zext_ln321_1_fu_505_p1;
wire   [4:0] tmp_2_fu_514_p31;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

dut_mux_305_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 6 ),
    .din5_WIDTH( 6 ),
    .din6_WIDTH( 6 ),
    .din7_WIDTH( 6 ),
    .din8_WIDTH( 6 ),
    .din9_WIDTH( 6 ),
    .din10_WIDTH( 6 ),
    .din11_WIDTH( 6 ),
    .din12_WIDTH( 6 ),
    .din13_WIDTH( 6 ),
    .din14_WIDTH( 6 ),
    .din15_WIDTH( 6 ),
    .din16_WIDTH( 6 ),
    .din17_WIDTH( 6 ),
    .din18_WIDTH( 6 ),
    .din19_WIDTH( 6 ),
    .din20_WIDTH( 6 ),
    .din21_WIDTH( 6 ),
    .din22_WIDTH( 6 ),
    .din23_WIDTH( 6 ),
    .din24_WIDTH( 6 ),
    .din25_WIDTH( 6 ),
    .din26_WIDTH( 6 ),
    .din27_WIDTH( 6 ),
    .din28_WIDTH( 6 ),
    .din29_WIDTH( 6 ),
    .din30_WIDTH( 5 ),
    .dout_WIDTH( 6 ))
dut_mux_305_6_1_1_U1(
    .din0(knn_set_0_0_V_read),
    .din1(knn_set_0_1_V_read),
    .din2(knn_set_0_2_V_read),
    .din3(knn_set_1_0_V_read),
    .din4(knn_set_1_1_V_read),
    .din5(knn_set_1_2_V_read),
    .din6(knn_set_2_0_V_read),
    .din7(knn_set_2_1_V_read),
    .din8(knn_set_2_2_V_read),
    .din9(knn_set_3_0_V_read),
    .din10(knn_set_3_1_V_read),
    .din11(knn_set_3_2_V_read),
    .din12(knn_set_4_0_V_read),
    .din13(knn_set_4_1_V_read),
    .din14(knn_set_4_2_V_read),
    .din15(knn_set_5_0_V_read),
    .din16(knn_set_5_1_V_read),
    .din17(knn_set_5_2_V_read),
    .din18(knn_set_6_0_V_read),
    .din19(knn_set_6_1_V_read),
    .din20(knn_set_6_2_V_read),
    .din21(knn_set_7_0_V_read),
    .din22(knn_set_7_1_V_read),
    .din23(knn_set_7_2_V_read),
    .din24(knn_set_8_0_V_read),
    .din25(knn_set_8_1_V_read),
    .din26(knn_set_8_2_V_read),
    .din27(knn_set_9_0_V_read),
    .din28(knn_set_9_1_V_read),
    .din29(knn_set_9_2_V_read),
    .din30(tmp_2_fu_514_p31),
    .dout(tmp_2_fu_514_p32)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_414_p2 == 1'd1))) begin
        i1_0_reg_392 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln130_fu_563_p2 == 1'd1))) begin
        i1_0_reg_392 <= i_reg_770;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln121_fu_478_p2 == 1'd0))) begin
        i_op_assign_reg_381 <= j_fu_484_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_414_p2 == 1'd0))) begin
        i_op_assign_reg_381 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j2_0_reg_403 <= j_1_reg_778;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln129_fu_551_p2 == 1'd0))) begin
        j2_0_reg_403 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_478_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        t_V_reg_368 <= i_V_reg_744;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_V_reg_368 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_744 <= i_V_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_770 <= i_fu_557_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln895_reg_803 <= icmp_ln895_fu_585_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_1_reg_778 <= j_1_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_414_p2 == 1'd0))) begin
        lhs_V_reg_749[35 : 0] <= lhs_V_fu_452_p1[35 : 0];
        sub_ln321_reg_754 <= sub_ln321_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln130_fu_563_p2 == 1'd0))) begin
        sorted_distances_V_a_1_reg_793 <= zext_ln131_fu_575_p1;
        sorted_distances_V_a_2_reg_798 <= zext_ln131_1_fu_580_p1;
        zext_ln131_1_reg_788[4 : 0] <= zext_ln131_1_fu_580_p1[4 : 0];
        zext_ln131_reg_783[4 : 0] <= zext_ln131_fu_575_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln895_fu_585_p2 == 1'd1))) begin
        sorted_labels_V_addr_1_reg_807 <= zext_ln131_1_reg_788;
        sorted_labels_V_addr_2_reg_813 <= zext_ln131_reg_783;
    end
end

always @ (*) begin
    if ((((icmp_ln129_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln129_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sorted_distances_V_address0 = sorted_distances_V_a_1_reg_793;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sorted_distances_V_address0 = zext_ln131_fu_575_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sorted_distances_V_address0 = zext_ln544_fu_499_p1;
    end else begin
        sorted_distances_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sorted_distances_V_address1 = sorted_distances_V_a_2_reg_798;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sorted_distances_V_address1 = zext_ln131_1_fu_580_p1;
    end else begin
        sorted_distances_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        sorted_distances_V_ce0 = 1'b1;
    end else begin
        sorted_distances_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sorted_distances_V_ce1 = 1'b1;
    end else begin
        sorted_distances_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sorted_distances_V_d0 = sorted_distances_V_q1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sorted_distances_V_d0 = tmp_2_fu_514_p32;
    end else begin
        sorted_distances_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (icmp_ln895_fu_585_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln121_fu_478_p2 == 1'd0)))) begin
        sorted_distances_V_we0 = 1'b1;
    end else begin
        sorted_distances_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln895_fu_585_p2 == 1'd1))) begin
        sorted_distances_V_we1 = 1'b1;
    end else begin
        sorted_distances_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sorted_labels_V_address0 = sorted_labels_V_addr_2_reg_813;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sorted_labels_V_address0 = zext_ln131_1_reg_788;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sorted_labels_V_address0 = zext_ln544_fu_499_p1;
    end else begin
        sorted_labels_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sorted_labels_V_address1 = sorted_labels_V_addr_1_reg_807;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sorted_labels_V_address1 = zext_ln131_reg_783;
    end else begin
        sorted_labels_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        sorted_labels_V_ce0 = 1'b1;
    end else begin
        sorted_labels_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        sorted_labels_V_ce1 = 1'b1;
    end else begin
        sorted_labels_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sorted_labels_V_d0 = sorted_labels_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sorted_labels_V_d0 = t_V_reg_368;
    end else begin
        sorted_labels_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (icmp_ln895_reg_803 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln121_fu_478_p2 == 1'd0)))) begin
        sorted_labels_V_we0 = 1'b1;
    end else begin
        sorted_labels_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln895_reg_803 == 1'd1))) begin
        sorted_labels_V_we1 = 1'b1;
    end else begin
        sorted_labels_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln887_fu_414_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln121_fu_478_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln129_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln130_fu_563_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign i_V_fu_420_p2 = (t_V_reg_368 + 4'd1);

assign i_fu_557_p2 = (i1_0_reg_392 + 5'd1);

assign icmp_ln121_fu_478_p2 = ((i_op_assign_reg_381 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_551_p2 = ((i1_0_reg_392 == 5'd30) ? 1'b1 : 1'b0);

assign icmp_ln130_fu_563_p2 = ((j2_0_reg_403 == 5'd29) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_414_p2 = ((t_V_reg_368 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_585_p2 = ((sorted_distances_V_q0 > sorted_distances_V_q1) ? 1'b1 : 1'b0);

assign j_1_fu_569_p2 = (j2_0_reg_403 + 5'd1);

assign j_fu_484_p2 = (i_op_assign_reg_381 + 2'd1);

assign lhs_V_fu_452_p1 = $unsigned(sext_ln1352_fu_448_p1);

assign ret_V_1_fu_494_p2 = (lhs_V_reg_749 + rhs_V_fu_490_p1);

assign ret_V_fu_442_p2 = (zext_ln1352_1_fu_438_p1 - zext_ln1352_fu_426_p1);

assign rhs_V_fu_490_p1 = i_op_assign_reg_381;

assign sext_ln1352_fu_448_p1 = $signed(ret_V_fu_442_p2);

assign shl_ln1_fu_464_p3 = {{trunc_ln321_fu_460_p1}, {2'd0}};

assign shl_ln_fu_430_p3 = {{t_V_reg_368}, {2'd0}};

assign sorted_distances_V_d1 = sorted_distances_V_q0;

assign sorted_labels_V_d1 = sorted_labels_V_q1;

assign sub_ln321_fu_472_p2 = (shl_ln1_fu_464_p3 - zext_ln321_fu_456_p1);

assign tmp_2_fu_514_p31 = (sub_ln321_reg_754 + zext_ln321_1_fu_505_p1);

assign trunc_ln321_fu_460_p1 = t_V_reg_368[2:0];

assign zext_ln131_1_fu_580_p1 = j_1_fu_569_p2;

assign zext_ln131_fu_575_p1 = j2_0_reg_403;

assign zext_ln1352_1_fu_438_p1 = shl_ln_fu_430_p3;

assign zext_ln1352_fu_426_p1 = t_V_reg_368;

assign zext_ln321_1_fu_505_p1 = i_op_assign_reg_381;

assign zext_ln321_fu_456_p1 = t_V_reg_368;

assign zext_ln544_fu_499_p1 = ret_V_1_fu_494_p2;

always @ (posedge ap_clk) begin
    lhs_V_reg_749[36] <= 1'b0;
    zext_ln131_reg_783[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln131_1_reg_788[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //sort_knn
