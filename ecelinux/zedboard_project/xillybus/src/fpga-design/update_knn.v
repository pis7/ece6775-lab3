// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update_knn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        test_inst_V,
        train_inst_V,
        min_distances_0_V_r_2,
        min_distances_0_V_r,
        min_distances_1_V_r_2,
        min_distances_1_V_r,
        min_distances_2_V_r_2,
        min_distances_2_V_r,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [48:0] test_inst_V;
input  [47:0] train_inst_V;
input  [5:0] min_distances_0_V_r_2;
input  [5:0] min_distances_0_V_r;
input  [5:0] min_distances_1_V_r_2;
input  [5:0] min_distances_1_V_r;
input  [5:0] min_distances_2_V_r_2;
input  [5:0] min_distances_2_V_r;
output  [5:0] ap_return_0;
output  [5:0] ap_return_1;
output  [5:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] ap_return_0;
reg[5:0] ap_return_1;
reg[5:0] ap_return_2;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [48:0] ret_V_fu_182_p2;
reg   [48:0] ret_V_reg_417;
wire   [5:0] i_fu_198_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] dist_V_fu_215_p2;
wire   [0:0] icmp_ln89_fu_192_p2;
wire   [3:0] select_ln96_fu_262_p3;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln95_fu_221_p2;
wire   [1:0] i_1_fu_270_p2;
reg   [5:0] min_distances_0_V_0_reg_106;
reg   [5:0] bvh_d_index_reg_118;
reg   [3:0] p_032_0_reg_129;
reg   [1:0] val_assign_reg_140;
wire   [5:0] select_ln100_1_fu_345_p3;
reg   [5:0] ap_phi_mux_phi_ln101_phi_fu_154_p4;
wire   [0:0] icmp_ln895_fu_289_p2;
wire   [5:0] select_ln100_2_fu_353_p3;
reg   [5:0] ap_phi_mux_phi_ln101_1_phi_fu_163_p4;
wire   [5:0] select_ln100_fu_337_p3;
reg   [5:0] ap_phi_mux_phi_ln101_2_phi_fu_172_p4;
wire   [48:0] train_inst_V_cast_fu_178_p1;
wire   [31:0] zext_ln89_fu_188_p1;
wire   [0:0] p_Result_s_fu_204_p3;
wire   [5:0] zext_ln700_fu_211_p1;
wire   [0:0] icmp_ln895_2_fu_227_p2;
wire   [1:0] tmp_1_fu_243_p4;
wire   [5:0] select_ln895_fu_233_p3;
wire   [5:0] tmp_1_fu_243_p5;
wire   [0:0] icmp_ln895_1_fu_252_p2;
wire   [3:0] max_idx_V_fu_258_p1;
wire   [1:0] trunc_ln895_fu_276_p1;
wire   [5:0] tmp_fu_280_p5;
wire   [0:0] write_flag_1_fu_295_p6;
wire   [0:0] write_flag4_1_fu_323_p6;
wire   [0:0] write_flag7_1_fu_309_p6;
reg   [5:0] ap_return_0_preg;
reg   [5:0] ap_return_1_preg;
reg   [5:0] ap_return_2_preg;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_return_0_preg = 6'd0;
#0 ap_return_1_preg = 6'd0;
#0 ap_return_2_preg = 6'd0;
end

dut_mux_32_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
dut_mux_32_6_1_1_U1(
    .din0(min_distances_0_V_r),
    .din1(min_distances_1_V_r),
    .din2(min_distances_2_V_r),
    .din3(tmp_1_fu_243_p4),
    .dout(tmp_1_fu_243_p5)
);

dut_mux_32_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
dut_mux_32_6_1_1_U2(
    .din0(min_distances_0_V_r),
    .din1(min_distances_1_V_r),
    .din2(min_distances_2_V_r),
    .din3(trunc_ln895_fu_276_p1),
    .dout(tmp_fu_280_p5)
);

dut_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
dut_mux_42_1_1_1_U3(
    .din0(1'd1),
    .din1(1'd0),
    .din2(1'd0),
    .din3(1'd0),
    .din4(trunc_ln895_fu_276_p1),
    .dout(write_flag_1_fu_295_p6)
);

dut_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
dut_mux_42_1_1_1_U4(
    .din0(1'd0),
    .din1(1'd0),
    .din2(1'd1),
    .din3(1'd1),
    .din4(trunc_ln895_fu_276_p1),
    .dout(write_flag7_1_fu_309_p6)
);

dut_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
dut_mux_42_1_1_1_U5(
    .din0(1'd0),
    .din1(1'd1),
    .din2(1'd0),
    .din3(1'd0),
    .din4(trunc_ln895_fu_276_p1),
    .dout(write_flag4_1_fu_323_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 6'd0;
    end else begin
        if (((icmp_ln95_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_return_0_preg <= ap_phi_mux_phi_ln101_2_phi_fu_172_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 6'd0;
    end else begin
        if (((icmp_ln95_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_return_1_preg <= ap_phi_mux_phi_ln101_phi_fu_154_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 6'd0;
    end else begin
        if (((icmp_ln95_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_return_2_preg <= ap_phi_mux_phi_ln101_1_phi_fu_163_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_fu_192_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bvh_d_index_reg_118 <= i_fu_198_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bvh_d_index_reg_118 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_fu_192_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        min_distances_0_V_0_reg_106 <= dist_V_fu_215_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        min_distances_0_V_0_reg_106 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_fu_192_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_032_0_reg_129 <= 4'd0;
    end else if (((icmp_ln95_fu_221_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_032_0_reg_129 <= select_ln96_fu_262_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_fu_192_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        val_assign_reg_140 <= 2'd1;
    end else if (((icmp_ln95_fu_221_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        val_assign_reg_140 <= i_1_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ret_V_reg_417 <= ret_V_fu_182_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln95_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln95_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        if ((icmp_ln895_fu_289_p2 == 1'd0)) begin
            ap_phi_mux_phi_ln101_1_phi_fu_163_p4 = min_distances_2_V_r_2;
        end else if ((icmp_ln895_fu_289_p2 == 1'd1)) begin
            ap_phi_mux_phi_ln101_1_phi_fu_163_p4 = select_ln100_2_fu_353_p3;
        end else begin
            ap_phi_mux_phi_ln101_1_phi_fu_163_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_phi_ln101_1_phi_fu_163_p4 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln95_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        if ((icmp_ln895_fu_289_p2 == 1'd0)) begin
            ap_phi_mux_phi_ln101_2_phi_fu_172_p4 = min_distances_0_V_r_2;
        end else if ((icmp_ln895_fu_289_p2 == 1'd1)) begin
            ap_phi_mux_phi_ln101_2_phi_fu_172_p4 = select_ln100_fu_337_p3;
        end else begin
            ap_phi_mux_phi_ln101_2_phi_fu_172_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_phi_ln101_2_phi_fu_172_p4 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln95_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        if ((icmp_ln895_fu_289_p2 == 1'd0)) begin
            ap_phi_mux_phi_ln101_phi_fu_154_p4 = min_distances_1_V_r_2;
        end else if ((icmp_ln895_fu_289_p2 == 1'd1)) begin
            ap_phi_mux_phi_ln101_phi_fu_154_p4 = select_ln100_1_fu_345_p3;
        end else begin
            ap_phi_mux_phi_ln101_phi_fu_154_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_phi_ln101_phi_fu_154_p4 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln95_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln95_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_return_0 = ap_phi_mux_phi_ln101_2_phi_fu_172_p4;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((icmp_ln95_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_return_1 = ap_phi_mux_phi_ln101_phi_fu_154_p4;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((icmp_ln95_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_return_2 = ap_phi_mux_phi_ln101_1_phi_fu_163_p4;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln89_fu_192_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln95_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign dist_V_fu_215_p2 = (zext_ln700_fu_211_p1 + min_distances_0_V_0_reg_106);

assign i_1_fu_270_p2 = (2'd1 + val_assign_reg_140);

assign i_fu_198_p2 = (bvh_d_index_reg_118 + 6'd1);

assign icmp_ln895_1_fu_252_p2 = ((select_ln895_fu_233_p3 > tmp_1_fu_243_p5) ? 1'b1 : 1'b0);

assign icmp_ln895_2_fu_227_p2 = ((val_assign_reg_140 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_289_p2 = ((tmp_fu_280_p5 > min_distances_0_V_0_reg_106) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_192_p2 = ((bvh_d_index_reg_118 == 6'd49) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_221_p2 = ((val_assign_reg_140 == 2'd3) ? 1'b1 : 1'b0);

assign max_idx_V_fu_258_p1 = val_assign_reg_140;

assign p_Result_s_fu_204_p3 = ret_V_reg_417[zext_ln89_fu_188_p1];

assign ret_V_fu_182_p2 = (train_inst_V_cast_fu_178_p1 ^ test_inst_V);

assign select_ln100_1_fu_345_p3 = ((write_flag4_1_fu_323_p6[0:0] === 1'b1) ? min_distances_0_V_0_reg_106 : min_distances_1_V_r_2);

assign select_ln100_2_fu_353_p3 = ((write_flag7_1_fu_309_p6[0:0] === 1'b1) ? min_distances_0_V_0_reg_106 : min_distances_2_V_r_2);

assign select_ln100_fu_337_p3 = ((write_flag_1_fu_295_p6[0:0] === 1'b1) ? min_distances_0_V_0_reg_106 : min_distances_0_V_r_2);

assign select_ln895_fu_233_p3 = ((icmp_ln895_2_fu_227_p2[0:0] === 1'b1) ? min_distances_1_V_r : min_distances_2_V_r);

assign select_ln96_fu_262_p3 = ((icmp_ln895_1_fu_252_p2[0:0] === 1'b1) ? max_idx_V_fu_258_p1 : p_032_0_reg_129);

assign tmp_1_fu_243_p4 = p_032_0_reg_129[1:0];

assign train_inst_V_cast_fu_178_p1 = train_inst_V;

assign trunc_ln895_fu_276_p1 = p_032_0_reg_129[1:0];

assign zext_ln700_fu_211_p1 = p_Result_s_fu_204_p3;

assign zext_ln89_fu_188_p1 = bvh_d_index_reg_118;

endmodule //update_knn
