-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity digitrec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V : IN STD_LOGIC_VECTOR (48 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of digitrec is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv11_708 : STD_LOGIC_VECTOR (10 downto 0) := "11100001000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv15_708 : STD_LOGIC_VECTOR (14 downto 0) := "000011100001000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal training_data_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal training_data_V_ce0 : STD_LOGIC;
    signal training_data_V_q0 : STD_LOGIC_VECTOR (47 downto 0);
    signal i_fu_248_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_488 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln321_fu_266_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln321_reg_493 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln51_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_278_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_3_fu_304_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_3_reg_509 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln59_fu_310_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln59_reg_514 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln57_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln59_fu_314_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln59_reg_519 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_fu_326_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_527 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln59_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln895_fu_354_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln895_reg_537 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ret_V_fu_364_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal ret_V_reg_544 : STD_LOGIC_VECTOR (48 downto 0);
    signal i_4_fu_379_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal dist_V_fu_396_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln89_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln95_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal knn_set_V_addr_1_reg_575 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln96_fu_460_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_5_fu_468_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal knn_set_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal knn_set_V_ce0 : STD_LOGIC;
    signal knn_set_V_we0 : STD_LOGIC;
    signal knn_set_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal knn_set_V_ce1 : STD_LOGIC;
    signal knn_set_V_we1 : STD_LOGIC;
    signal knn_set_V_q1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_knn_vote_fu_237_ap_start : STD_LOGIC;
    signal grp_knn_vote_fu_237_ap_done : STD_LOGIC;
    signal grp_knn_vote_fu_237_ap_idle : STD_LOGIC;
    signal grp_knn_vote_fu_237_ap_ready : STD_LOGIC;
    signal grp_knn_vote_fu_237_knn_set_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_knn_vote_fu_237_knn_set_V_ce0 : STD_LOGIC;
    signal grp_knn_vote_fu_237_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_133 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln52_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_0_reg_144 : STD_LOGIC_VECTOR (1 downto 0);
    signal i4_0_reg_155 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_0_reg_166 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal phi_mul_reg_178 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_053_0_i_reg_189 : STD_LOGIC_VECTOR (5 downto 0);
    signal bvh_d_index_reg_202 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_032_0_i_reg_213 : STD_LOGIC_VECTOR (3 downto 0);
    signal val_assign_reg_225 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_knn_vote_fu_237_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal sext_ln321_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_1_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln895_1_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln895_2_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln895_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln895_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_258_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln321_fu_254_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln321_2_fu_284_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln321_fu_288_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln61_fu_332_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_fu_346_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln61_fu_342_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln61_2_fu_360_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln89_fu_369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_385_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln700_fu_392_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln895_1_fu_408_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln895_1_fu_412_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln895_2_fu_422_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln895_2_fu_426_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln895_fu_436_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln895_fu_440_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln895_2_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_idx_V_fu_456_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component knn_vote IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        knn_set_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        knn_set_V_ce0 : OUT STD_LOGIC;
        knn_set_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component digitrec_trainingdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component digitrec_knn_set_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (5 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    training_data_V_U : component digitrec_trainingdEe
    generic map (
        DataWidth => 48,
        AddressRange => 18000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_data_V_address0,
        ce0 => training_data_V_ce0,
        q0 => training_data_V_q0);

    knn_set_V_U : component digitrec_knn_set_V
    generic map (
        DataWidth => 6,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => knn_set_V_address0,
        ce0 => knn_set_V_ce0,
        we0 => knn_set_V_we0,
        d0 => ap_const_lv6_32,
        q0 => knn_set_V_q0,
        address1 => knn_set_V_address1,
        ce1 => knn_set_V_ce1,
        we1 => knn_set_V_we1,
        d1 => p_053_0_i_reg_189,
        q1 => knn_set_V_q1);

    grp_knn_vote_fu_237 : component knn_vote
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_knn_vote_fu_237_ap_start,
        ap_done => grp_knn_vote_fu_237_ap_done,
        ap_idle => grp_knn_vote_fu_237_ap_idle,
        ap_ready => grp_knn_vote_fu_237_ap_ready,
        knn_set_V_address0 => grp_knn_vote_fu_237_knn_set_V_address0,
        knn_set_V_ce0 => grp_knn_vote_fu_237_knn_set_V_ce0,
        knn_set_V_q0 => knn_set_V_q0,
        ap_return => grp_knn_vote_fu_237_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv4_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_knn_vote_fu_237_ap_done = ap_const_logic_1))) then 
                    ap_return_preg <= grp_knn_vote_fu_237_ap_return;
                end if; 
            end if;
        end if;
    end process;


    grp_knn_vote_fu_237_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_knn_vote_fu_237_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln57_fu_298_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_knn_vote_fu_237_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_knn_vote_fu_237_ap_ready = ap_const_logic_1)) then 
                    grp_knn_vote_fu_237_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bvh_d_index_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_373_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                bvh_d_index_reg_202 <= i_4_fu_379_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                bvh_d_index_reg_202 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i4_0_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i4_0_reg_155 <= ap_const_lv11_0;
            elsif (((icmp_ln59_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i4_0_reg_155 <= i_3_reg_509;
            end if; 
        end if;
    end process;

    i_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln52_fu_272_p2 = ap_const_lv1_1))) then 
                i_0_reg_133 <= i_reg_488;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_133 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_0_reg_166 <= j_reg_527;
            elsif (((icmp_ln57_fu_298_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_166 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_reg_144 <= ap_const_lv2_0;
            elsif (((icmp_ln52_fu_272_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_144 <= k_fu_278_p2;
            end if; 
        end if;
    end process;

    p_032_0_i_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln89_fu_373_p2 = ap_const_lv1_1))) then 
                p_032_0_i_reg_213 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_032_0_i_reg_213 <= select_ln96_fu_460_p3;
            end if; 
        end if;
    end process;

    p_053_0_i_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_373_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_053_0_i_reg_189 <= dist_V_fu_396_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_053_0_i_reg_189 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                phi_mul_reg_178 <= add_ln59_reg_519;
            elsif (((icmp_ln57_fu_298_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_178 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    val_assign_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln89_fu_373_p2 = ap_const_lv1_1))) then 
                val_assign_reg_225 <= ap_const_lv2_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                val_assign_reg_225 <= i_5_fu_468_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln59_reg_519 <= add_ln59_fu_314_p2;
                j_reg_527 <= j_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_3_reg_509 <= i_3_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_488 <= i_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln95_fu_402_p2 = ap_const_lv1_1))) then
                knn_set_V_addr_1_reg_575 <= sext_ln895_fu_445_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                ret_V_reg_544 <= ret_V_fu_364_p2;
                sub_ln895_reg_537 <= sub_ln895_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sub_ln321_reg_493 <= sub_ln321_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_298_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln59_reg_514(10 downto 0) <= zext_ln59_fu_310_p1(10 downto 0);
            end if;
        end if;
    end process;
    zext_ln59_reg_514(14 downto 11) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln51_fu_242_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln57_fu_298_p2, ap_CS_fsm_state5, icmp_ln59_fu_320_p2, ap_CS_fsm_state7, icmp_ln89_fu_373_p2, ap_CS_fsm_state8, icmp_ln95_fu_402_p2, grp_knn_vote_fu_237_ap_done, icmp_ln52_fu_272_p2, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln51_fu_242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln52_fu_272_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln57_fu_298_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln59_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln89_fu_373_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln95_fu_402_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_knn_vote_fu_237_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln321_fu_288_p2 <= std_logic_vector(unsigned(sub_ln321_reg_493) + unsigned(zext_ln321_2_fu_284_p1));
    add_ln59_fu_314_p2 <= std_logic_vector(unsigned(phi_mul_reg_178) + unsigned(ap_const_lv15_708));
    add_ln61_fu_332_p2 <= std_logic_vector(unsigned(phi_mul_reg_178) + unsigned(zext_ln59_reg_514));
    add_ln895_1_fu_412_p2 <= std_logic_vector(unsigned(sub_ln895_reg_537) + unsigned(zext_ln895_1_fu_408_p1));
    add_ln895_2_fu_426_p2 <= std_logic_vector(unsigned(sub_ln895_reg_537) + unsigned(zext_ln895_2_fu_422_p1));
    add_ln895_fu_440_p2 <= std_logic_vector(unsigned(sub_ln895_reg_537) + unsigned(zext_ln895_fu_436_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_knn_vote_fu_237_ap_done, ap_CS_fsm_state11)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_knn_vote_fu_237_ap_done = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_knn_vote_fu_237_ap_done, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_knn_vote_fu_237_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_knn_vote_fu_237_ap_done, grp_knn_vote_fu_237_ap_return, ap_CS_fsm_state11, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_knn_vote_fu_237_ap_done = ap_const_logic_1))) then 
            ap_return <= grp_knn_vote_fu_237_ap_return;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    dist_V_fu_396_p2 <= std_logic_vector(unsigned(zext_ln700_fu_392_p1) + unsigned(p_053_0_i_reg_189));
    grp_knn_vote_fu_237_ap_start <= grp_knn_vote_fu_237_ap_start_reg;
    i_3_fu_304_p2 <= std_logic_vector(unsigned(i4_0_reg_155) + unsigned(ap_const_lv11_1));
    i_4_fu_379_p2 <= std_logic_vector(unsigned(bvh_d_index_reg_202) + unsigned(ap_const_lv6_1));
    i_5_fu_468_p2 <= std_logic_vector(unsigned(val_assign_reg_225) + unsigned(ap_const_lv2_1));
    i_fu_248_p2 <= std_logic_vector(unsigned(i_0_reg_133) + unsigned(ap_const_lv4_1));
    icmp_ln51_fu_242_p2 <= "1" when (i_0_reg_133 = ap_const_lv4_A) else "0";
    icmp_ln52_fu_272_p2 <= "1" when (k_0_reg_144 = ap_const_lv2_3) else "0";
    icmp_ln57_fu_298_p2 <= "1" when (i4_0_reg_155 = ap_const_lv11_708) else "0";
    icmp_ln59_fu_320_p2 <= "1" when (j_0_reg_166 = ap_const_lv4_A) else "0";
    icmp_ln895_2_fu_450_p2 <= "1" when (unsigned(knn_set_V_q0) > unsigned(knn_set_V_q1)) else "0";
    icmp_ln895_fu_474_p2 <= "1" when (unsigned(knn_set_V_q0) > unsigned(p_053_0_i_reg_189)) else "0";
    icmp_ln89_fu_373_p2 <= "1" when (bvh_d_index_reg_202 = ap_const_lv6_31) else "0";
    icmp_ln95_fu_402_p2 <= "1" when (val_assign_reg_225 = ap_const_lv2_3) else "0";
    j_fu_326_p2 <= std_logic_vector(unsigned(j_0_reg_166) + unsigned(ap_const_lv4_1));
    k_fu_278_p2 <= std_logic_vector(unsigned(k_0_reg_144) + unsigned(ap_const_lv2_1));

    knn_set_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, icmp_ln95_fu_402_p2, grp_knn_vote_fu_237_knn_set_V_address0, ap_CS_fsm_state11, sext_ln321_fu_293_p1, sext_ln895_1_fu_417_p1, sext_ln895_fu_445_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln95_fu_402_p2 = ap_const_lv1_1))) then 
            knn_set_V_address0 <= sext_ln895_fu_445_p1(5 - 1 downto 0);
        elsif (((icmp_ln95_fu_402_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            knn_set_V_address0 <= sext_ln895_1_fu_417_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            knn_set_V_address0 <= sext_ln321_fu_293_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            knn_set_V_address0 <= grp_knn_vote_fu_237_knn_set_V_address0;
        else 
            knn_set_V_address0 <= "XXXXX";
        end if; 
    end process;


    knn_set_V_address1_assign_proc : process(ap_CS_fsm_state8, knn_set_V_addr_1_reg_575, ap_CS_fsm_state10, sext_ln895_2_fu_431_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            knn_set_V_address1 <= knn_set_V_addr_1_reg_575;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            knn_set_V_address1 <= sext_ln895_2_fu_431_p1(5 - 1 downto 0);
        else 
            knn_set_V_address1 <= "XXXXX";
        end if; 
    end process;


    knn_set_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, icmp_ln95_fu_402_p2, grp_knn_vote_fu_237_knn_set_V_ce0, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln95_fu_402_p2 = ap_const_lv1_1)) or ((icmp_ln95_fu_402_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            knn_set_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            knn_set_V_ce0 <= grp_knn_vote_fu_237_knn_set_V_ce0;
        else 
            knn_set_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    knn_set_V_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            knn_set_V_ce1 <= ap_const_logic_1;
        else 
            knn_set_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    knn_set_V_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln52_fu_272_p2)
    begin
        if (((icmp_ln52_fu_272_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            knn_set_V_we0 <= ap_const_logic_1;
        else 
            knn_set_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    knn_set_V_we1_assign_proc : process(ap_CS_fsm_state10, icmp_ln895_fu_474_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln895_fu_474_p2 = ap_const_lv1_1))) then 
            knn_set_V_we1 <= ap_const_logic_1;
        else 
            knn_set_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    max_idx_V_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_reg_225),4));
    p_Result_s_fu_385_p3 <= ret_V_reg_544(to_integer(unsigned(zext_ln89_fu_369_p1)) downto to_integer(unsigned(zext_ln89_fu_369_p1))) when (to_integer(unsigned(zext_ln89_fu_369_p1))>= 0 and to_integer(unsigned(zext_ln89_fu_369_p1))<=48) else "-";
    ret_V_fu_364_p2 <= (zext_ln61_2_fu_360_p1 xor input_V);
    select_ln96_fu_460_p3 <= 
        max_idx_V_fu_456_p1 when (icmp_ln895_2_fu_450_p2(0) = '1') else 
        p_032_0_i_reg_213;
        sext_ln321_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln321_fu_288_p2),64));

        sext_ln895_1_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln895_1_fu_412_p2),64));

        sext_ln895_2_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln895_2_fu_426_p2),64));

        sext_ln895_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln895_fu_440_p2),64));

    sub_ln321_fu_266_p2 <= std_logic_vector(unsigned(tmp_3_fu_258_p3) - unsigned(zext_ln321_fu_254_p1));
    sub_ln895_fu_354_p2 <= std_logic_vector(unsigned(tmp_4_fu_346_p3) - unsigned(zext_ln61_fu_342_p1));
    tmp_3_fu_258_p3 <= (i_0_reg_133 & ap_const_lv2_0);
    tmp_4_fu_346_p3 <= (j_0_reg_166 & ap_const_lv2_0);
    training_data_V_address0 <= zext_ln61_1_fu_337_p1(15 - 1 downto 0);

    training_data_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            training_data_V_ce0 <= ap_const_logic_1;
        else 
            training_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln321_2_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_144),6));
    zext_ln321_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_133),6));
    zext_ln59_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_reg_155),15));
    zext_ln61_1_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_fu_332_p2),64));
    zext_ln61_2_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(training_data_V_q0),49));
    zext_ln61_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_166),6));
    zext_ln700_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_385_p3),6));
    zext_ln895_1_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_reg_225),6));
    zext_ln895_2_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_032_0_i_reg_213),6));
    zext_ln895_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_032_0_i_reg_213),6));
    zext_ln89_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bvh_d_index_reg_202),32));
end behav;
