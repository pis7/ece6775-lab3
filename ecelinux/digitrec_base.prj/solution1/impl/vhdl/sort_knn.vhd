-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sort_knn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    knn_set_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    knn_set_V_ce0 : OUT STD_LOGIC;
    knn_set_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    sorted_distances_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sorted_distances_V_ce0 : OUT STD_LOGIC;
    sorted_distances_V_we0 : OUT STD_LOGIC;
    sorted_distances_V_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sorted_distances_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    sorted_distances_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sorted_distances_V_ce1 : OUT STD_LOGIC;
    sorted_distances_V_we1 : OUT STD_LOGIC;
    sorted_distances_V_d1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sorted_distances_V_q1 : IN STD_LOGIC_VECTOR (5 downto 0);
    sorted_labels_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sorted_labels_V_ce0 : OUT STD_LOGIC;
    sorted_labels_V_we0 : OUT STD_LOGIC;
    sorted_labels_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sorted_labels_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    sorted_labels_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sorted_labels_V_ce1 : OUT STD_LOGIC;
    sorted_labels_V_we1 : OUT STD_LOGIC;
    sorted_labels_V_d1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sorted_labels_V_q1 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of sort_knn is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_V_fu_190_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_V_reg_319 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal lhs_V_fu_222_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal lhs_V_reg_324 : STD_LOGIC_VECTOR (36 downto 0);
    signal icmp_ln887_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln321_fu_230_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln321_reg_329 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_fu_242_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_337 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ret_V_1_fu_252_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal ret_V_1_reg_342 : STD_LOGIC_VECTOR (36 downto 0);
    signal icmp_ln121_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_282_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_355 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_1_fu_294_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_363 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln131_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln131_reg_368 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln130_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln131_1_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln131_1_reg_373 : STD_LOGIC_VECTOR (63 downto 0);
    signal sorted_distances_V_a_1_reg_378 : STD_LOGIC_VECTOR (4 downto 0);
    signal sorted_distances_V_a_2_reg_383 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln895_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_reg_388 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sorted_labels_V_addr_1_reg_392 : STD_LOGIC_VECTOR (4 downto 0);
    signal sorted_labels_V_addr_2_reg_398 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_V_reg_138 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_op_assign_reg_151 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i1_0_reg_162 : STD_LOGIC_VECTOR (4 downto 0);
    signal j2_0_reg_173 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln129_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sext_ln321_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_200_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1352_1_fu_208_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1352_fu_196_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_V_fu_212_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1352_fu_218_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln321_fu_226_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal rhs_V_fu_248_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln321_1_fu_257_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln321_fu_261_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_162 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln130_fu_288_p2 = ap_const_lv1_1))) then 
                i1_0_reg_162 <= i_reg_355;
            end if; 
        end if;
    end process;

    i_op_assign_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_op_assign_reg_151 <= j_reg_337;
            elsif (((icmp_ln887_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_op_assign_reg_151 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j2_0_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j2_0_reg_173 <= j_1_reg_363;
            elsif (((icmp_ln129_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j2_0_reg_173 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    t_V_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_fu_236_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                t_V_reg_138 <= i_V_reg_319;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_V_reg_138 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_319 <= i_V_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_reg_355 <= i_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln895_reg_388 <= icmp_ln895_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_1_reg_363 <= j_1_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_337 <= j_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    lhs_V_reg_324(35 downto 0) <= lhs_V_fu_222_p1(35 downto 0);
                sub_ln321_reg_329 <= sub_ln321_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                ret_V_1_reg_342 <= ret_V_1_fu_252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln130_fu_288_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                sorted_distances_V_a_1_reg_378 <= zext_ln131_fu_300_p1(5 - 1 downto 0);
                sorted_distances_V_a_2_reg_383 <= zext_ln131_1_fu_305_p1(5 - 1 downto 0);
                    zext_ln131_1_reg_373(4 downto 0) <= zext_ln131_1_fu_305_p1(4 downto 0);
                    zext_ln131_reg_368(4 downto 0) <= zext_ln131_fu_300_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln895_fu_310_p2 = ap_const_lv1_1))) then
                sorted_labels_V_addr_1_reg_392 <= zext_ln131_1_reg_373(5 - 1 downto 0);
                sorted_labels_V_addr_2_reg_398 <= zext_ln131_reg_368(5 - 1 downto 0);
            end if;
        end if;
    end process;
    lhs_V_reg_324(36) <= '0';
    zext_ln131_reg_368(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln131_1_reg_373(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln887_fu_184_p2, ap_CS_fsm_state3, icmp_ln121_fu_236_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln130_fu_288_p2, icmp_ln129_fu_276_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln121_fu_236_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln129_fu_276_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln130_fu_288_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln321_fu_261_p2 <= std_logic_vector(unsigned(sub_ln321_reg_329) + unsigned(zext_ln321_1_fu_257_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln129_fu_276_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln129_fu_276_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln129_fu_276_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln129_fu_276_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_190_p2 <= std_logic_vector(unsigned(t_V_reg_138) + unsigned(ap_const_lv4_1));
    i_fu_282_p2 <= std_logic_vector(unsigned(i1_0_reg_162) + unsigned(ap_const_lv5_1));
    icmp_ln121_fu_236_p2 <= "1" when (i_op_assign_reg_151 = ap_const_lv2_3) else "0";
    icmp_ln129_fu_276_p2 <= "1" when (i1_0_reg_162 = ap_const_lv5_1E) else "0";
    icmp_ln130_fu_288_p2 <= "1" when (j2_0_reg_173 = ap_const_lv5_1D) else "0";
    icmp_ln887_fu_184_p2 <= "1" when (t_V_reg_138 = ap_const_lv4_A) else "0";
    icmp_ln895_fu_310_p2 <= "1" when (unsigned(sorted_distances_V_q0) > unsigned(sorted_distances_V_q1)) else "0";
    j_1_fu_294_p2 <= std_logic_vector(unsigned(j2_0_reg_173) + unsigned(ap_const_lv5_1));
    j_fu_242_p2 <= std_logic_vector(unsigned(i_op_assign_reg_151) + unsigned(ap_const_lv2_1));
    knn_set_V_address0 <= sext_ln321_fu_266_p1(5 - 1 downto 0);

    knn_set_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            knn_set_V_ce0 <= ap_const_logic_1;
        else 
            knn_set_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1352_fu_218_p1),37));
    ret_V_1_fu_252_p2 <= std_logic_vector(unsigned(rhs_V_fu_248_p1) + unsigned(lhs_V_reg_324));
    ret_V_fu_212_p2 <= std_logic_vector(unsigned(zext_ln1352_1_fu_208_p1) - unsigned(zext_ln1352_fu_196_p1));
    rhs_V_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_151),37));
        sext_ln1352_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_212_p2),36));

        sext_ln321_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln321_fu_261_p2),64));

    shl_ln_fu_200_p3 <= (t_V_reg_138 & ap_const_lv2_0);

    sorted_distances_V_address0_assign_proc : process(ap_CS_fsm_state6, zext_ln131_fu_300_p1, sorted_distances_V_a_1_reg_378, ap_CS_fsm_state7, ap_CS_fsm_state4, zext_ln544_fu_271_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sorted_distances_V_address0 <= sorted_distances_V_a_1_reg_378;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sorted_distances_V_address0 <= zext_ln131_fu_300_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sorted_distances_V_address0 <= zext_ln544_fu_271_p1(5 - 1 downto 0);
        else 
            sorted_distances_V_address0 <= "XXXXX";
        end if; 
    end process;


    sorted_distances_V_address1_assign_proc : process(ap_CS_fsm_state6, zext_ln131_1_fu_305_p1, sorted_distances_V_a_2_reg_383, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sorted_distances_V_address1 <= sorted_distances_V_a_2_reg_383;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sorted_distances_V_address1 <= zext_ln131_1_fu_305_p1(5 - 1 downto 0);
        else 
            sorted_distances_V_address1 <= "XXXXX";
        end if; 
    end process;


    sorted_distances_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sorted_distances_V_ce0 <= ap_const_logic_1;
        else 
            sorted_distances_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_distances_V_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sorted_distances_V_ce1 <= ap_const_logic_1;
        else 
            sorted_distances_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_distances_V_d0_assign_proc : process(knn_set_V_q0, sorted_distances_V_q1, ap_CS_fsm_state7, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sorted_distances_V_d0 <= sorted_distances_V_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sorted_distances_V_d0 <= knn_set_V_q0;
        else 
            sorted_distances_V_d0 <= "XXXXXX";
        end if; 
    end process;

    sorted_distances_V_d1 <= sorted_distances_V_q0;

    sorted_distances_V_we0_assign_proc : process(icmp_ln895_fu_310_p2, ap_CS_fsm_state7, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln895_fu_310_p2 = ap_const_lv1_1)))) then 
            sorted_distances_V_we0 <= ap_const_logic_1;
        else 
            sorted_distances_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_distances_V_we1_assign_proc : process(icmp_ln895_fu_310_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln895_fu_310_p2 = ap_const_lv1_1))) then 
            sorted_distances_V_we1 <= ap_const_logic_1;
        else 
            sorted_distances_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_labels_V_address0_assign_proc : process(zext_ln131_1_reg_373, ap_CS_fsm_state7, sorted_labels_V_addr_2_reg_398, ap_CS_fsm_state4, ap_CS_fsm_state8, zext_ln544_fu_271_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sorted_labels_V_address0 <= sorted_labels_V_addr_2_reg_398;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sorted_labels_V_address0 <= zext_ln131_1_reg_373(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sorted_labels_V_address0 <= zext_ln544_fu_271_p1(5 - 1 downto 0);
        else 
            sorted_labels_V_address0 <= "XXXXX";
        end if; 
    end process;


    sorted_labels_V_address1_assign_proc : process(zext_ln131_reg_368, ap_CS_fsm_state7, sorted_labels_V_addr_1_reg_392, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sorted_labels_V_address1 <= sorted_labels_V_addr_1_reg_392;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sorted_labels_V_address1 <= zext_ln131_reg_368(5 - 1 downto 0);
        else 
            sorted_labels_V_address1 <= "XXXXX";
        end if; 
    end process;


    sorted_labels_V_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sorted_labels_V_ce0 <= ap_const_logic_1;
        else 
            sorted_labels_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_labels_V_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sorted_labels_V_ce1 <= ap_const_logic_1;
        else 
            sorted_labels_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_labels_V_d0_assign_proc : process(sorted_labels_V_q0, t_V_reg_138, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sorted_labels_V_d0 <= sorted_labels_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sorted_labels_V_d0 <= t_V_reg_138;
        else 
            sorted_labels_V_d0 <= "XXXX";
        end if; 
    end process;

    sorted_labels_V_d1 <= sorted_labels_V_q1;

    sorted_labels_V_we0_assign_proc : process(icmp_ln895_reg_388, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln895_reg_388 = ap_const_lv1_1)))) then 
            sorted_labels_V_we0 <= ap_const_logic_1;
        else 
            sorted_labels_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_labels_V_we1_assign_proc : process(icmp_ln895_reg_388, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln895_reg_388 = ap_const_lv1_1))) then 
            sorted_labels_V_we1 <= ap_const_logic_1;
        else 
            sorted_labels_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln321_fu_230_p2 <= std_logic_vector(unsigned(shl_ln_fu_200_p3) - unsigned(zext_ln321_fu_226_p1));
    zext_ln131_1_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_fu_294_p2),64));
    zext_ln131_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_173),64));
    zext_ln1352_1_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_200_p3),7));
    zext_ln1352_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_138),7));
    zext_ln321_1_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_151),6));
    zext_ln321_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_138),6));
    zext_ln544_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_reg_342),64));
end behav;
