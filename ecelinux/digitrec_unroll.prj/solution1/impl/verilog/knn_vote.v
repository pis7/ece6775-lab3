// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module knn_vote (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        knn_set_0_0_V_read,
        knn_set_0_1_V_read,
        knn_set_0_2_V_read,
        knn_set_1_0_V_read,
        knn_set_1_1_V_read,
        knn_set_1_2_V_read,
        knn_set_2_0_V_read,
        knn_set_2_1_V_read,
        knn_set_2_2_V_read,
        knn_set_3_0_V_read,
        knn_set_3_1_V_read,
        knn_set_3_2_V_read,
        knn_set_4_0_V_read,
        knn_set_4_1_V_read,
        knn_set_4_2_V_read,
        knn_set_5_0_V_read,
        knn_set_5_1_V_read,
        knn_set_5_2_V_read,
        knn_set_6_0_V_read,
        knn_set_6_1_V_read,
        knn_set_6_2_V_read,
        knn_set_7_0_V_read,
        knn_set_7_1_V_read,
        knn_set_7_2_V_read,
        knn_set_8_0_V_read,
        knn_set_8_1_V_read,
        knn_set_8_2_V_read,
        knn_set_9_0_V_read,
        knn_set_9_1_V_read,
        knn_set_9_2_V_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] knn_set_0_0_V_read;
input  [5:0] knn_set_0_1_V_read;
input  [5:0] knn_set_0_2_V_read;
input  [5:0] knn_set_1_0_V_read;
input  [5:0] knn_set_1_1_V_read;
input  [5:0] knn_set_1_2_V_read;
input  [5:0] knn_set_2_0_V_read;
input  [5:0] knn_set_2_1_V_read;
input  [5:0] knn_set_2_2_V_read;
input  [5:0] knn_set_3_0_V_read;
input  [5:0] knn_set_3_1_V_read;
input  [5:0] knn_set_3_2_V_read;
input  [5:0] knn_set_4_0_V_read;
input  [5:0] knn_set_4_1_V_read;
input  [5:0] knn_set_4_2_V_read;
input  [5:0] knn_set_5_0_V_read;
input  [5:0] knn_set_5_1_V_read;
input  [5:0] knn_set_5_2_V_read;
input  [5:0] knn_set_6_0_V_read;
input  [5:0] knn_set_6_1_V_read;
input  [5:0] knn_set_6_2_V_read;
input  [5:0] knn_set_7_0_V_read;
input  [5:0] knn_set_7_1_V_read;
input  [5:0] knn_set_7_2_V_read;
input  [5:0] knn_set_8_0_V_read;
input  [5:0] knn_set_8_1_V_read;
input  [5:0] knn_set_8_2_V_read;
input  [5:0] knn_set_9_0_V_read;
input  [5:0] knn_set_9_1_V_read;
input  [5:0] knn_set_9_2_V_read;
output  [3:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] ap_return;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state3;
wire   [1:0] i_fu_544_p2;
wire   [31:0] zext_ln169_fu_565_p1;
reg   [31:0] zext_ln169_reg_1040;
wire    ap_CS_fsm_state4;
wire   [1:0] i_3_fu_575_p2;
reg   [1:0] i_3_reg_1048;
wire   [0:0] icmp_ln169_fu_569_p2;
wire   [3:0] sorted_labels_q0;
reg   [3:0] sorted_labels_load_1_reg_1058;
wire    ap_CS_fsm_state5;
wire   [1:0] trunc_ln171_fu_586_p1;
reg   [1:0] trunc_ln171_reg_1063;
wire    ap_CS_fsm_state6;
wire  signed [31:0] j_fu_590_p2;
reg  signed [31:0] j_reg_1069;
wire   [0:0] icmp_ln171_fu_596_p2;
wire   [3:0] freqs_0_V_4_fu_659_p3;
wire   [3:0] freqs_0_V_5_fu_675_p3;
wire   [3:0] freqs_0_V_6_fu_683_p3;
wire   [3:0] select_ln879_fu_752_p3;
wire    ap_CS_fsm_state7;
wire   [3:0] select_ln879_1_fu_760_p3;
wire   [3:0] select_ln879_2_fu_768_p3;
wire   [3:0] local_cnt_V_1_fu_776_p3;
wire   [3:0] select_ln183_fu_830_p3;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln182_fu_784_p2;
wire   [1:0] i_2_fu_838_p2;
wire   [5:0] sorted_distances_q0;
wire   [5:0] sorted_distances_q1;
reg   [4:0] sorted_labels_address0;
reg    sorted_labels_ce0;
reg    sorted_labels_we0;
reg    sorted_labels_ce1;
reg    sorted_labels_we1;
wire   [3:0] sorted_labels_q1;
wire    grp_sort_knn_fu_461_ap_start;
wire    grp_sort_knn_fu_461_ap_done;
wire    grp_sort_knn_fu_461_ap_idle;
wire    grp_sort_knn_fu_461_ap_ready;
wire   [4:0] grp_sort_knn_fu_461_sorted_distances_V_address0;
wire    grp_sort_knn_fu_461_sorted_distances_V_ce0;
wire    grp_sort_knn_fu_461_sorted_distances_V_we0;
wire   [5:0] grp_sort_knn_fu_461_sorted_distances_V_d0;
wire   [4:0] grp_sort_knn_fu_461_sorted_distances_V_address1;
wire    grp_sort_knn_fu_461_sorted_distances_V_ce1;
wire    grp_sort_knn_fu_461_sorted_distances_V_we1;
wire   [5:0] grp_sort_knn_fu_461_sorted_distances_V_d1;
wire   [4:0] grp_sort_knn_fu_461_sorted_labels_V_address0;
wire    grp_sort_knn_fu_461_sorted_labels_V_ce0;
wire    grp_sort_knn_fu_461_sorted_labels_V_we0;
wire   [3:0] grp_sort_knn_fu_461_sorted_labels_V_d0;
wire   [4:0] grp_sort_knn_fu_461_sorted_labels_V_address1;
wire    grp_sort_knn_fu_461_sorted_labels_V_ce1;
wire    grp_sort_knn_fu_461_sorted_labels_V_we1;
wire   [3:0] grp_sort_knn_fu_461_sorted_labels_V_d1;
wire   [1:0] ap_phi_mux_i_0_phi_fu_336_p4;
reg   [1:0] i_0_reg_332;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln164_fu_538_p2;
reg   [3:0] freqs_2_V_2_reg_343;
reg   [3:0] freqs_1_V_2_reg_353;
reg   [3:0] freqs_0_V_2_reg_363;
reg   [1:0] i3_0_reg_373;
reg   [3:0] freqs_2_V_3_reg_385;
reg   [3:0] freqs_1_V_3_reg_396;
reg   [3:0] freqs_0_V_reg_407;
reg   [3:0] t_V_reg_418;
reg   [31:0] j_0_in_reg_430;
reg   [3:0] p_022_0_reg_439;
reg   [1:0] val_assign_reg_450;
reg    grp_sort_knn_fu_461_ap_start_reg;
wire   [63:0] zext_ln172_fu_581_p1;
wire  signed [63:0] sext_ln172_fu_602_p1;
wire   [63:0] zext_ln544_fu_844_p1;
wire   [3:0] freqs_0_V_0_fu_106;
wire   [3:0] freqs_1_V_0_fu_110;
wire   [3:0] freqs_2_V_0_fu_114;
wire   [3:0] tmp_4_fu_607_p5;
wire   [0:0] icmp_ln321_1_fu_631_p2;
wire   [0:0] icmp_ln883_fu_619_p2;
wire   [0:0] icmp_ln321_fu_625_p2;
wire   [0:0] or_ln883_fu_645_p2;
wire   [3:0] select_ln883_fu_651_p3;
wire   [3:0] select_ln883_2_fu_667_p3;
wire   [3:0] freqs_0_V_3_fu_637_p3;
wire   [0:0] icmp_ln321_2_fu_702_p2;
wire   [0:0] icmp_ln321_3_fu_715_p2;
wire   [3:0] select_ln321_fu_707_p3;
wire   [3:0] select_ln321_2_fu_728_p3;
wire   [0:0] icmp_ln879_fu_691_p2;
wire   [3:0] select_ln321_1_fu_720_p3;
wire   [3:0] select_ln321_3_fu_736_p3;
wire   [3:0] select_ln321_4_fu_744_p3;
wire   [3:0] local_cnt_V_fu_696_p2;
wire   [0:0] icmp_ln895_2_fu_790_p2;
wire   [1:0] tmp_3_fu_808_p4;
wire   [3:0] select_ln895_fu_796_p3;
wire   [3:0] tmp_3_fu_808_p5;
wire   [0:0] icmp_ln895_fu_820_p2;
wire   [3:0] max_idx_V_fu_826_p1;
reg   [3:0] ap_return_preg;
wire    ap_CS_fsm_state9;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 grp_sort_knn_fu_461_ap_start_reg = 1'b0;
#0 ap_return_preg = 4'd0;
end

knn_vote_sorted_dbkb #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
sorted_distances_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_sort_knn_fu_461_sorted_distances_V_address0),
    .ce0(grp_sort_knn_fu_461_sorted_distances_V_ce0),
    .we0(grp_sort_knn_fu_461_sorted_distances_V_we0),
    .d0(grp_sort_knn_fu_461_sorted_distances_V_d0),
    .q0(sorted_distances_q0),
    .address1(grp_sort_knn_fu_461_sorted_distances_V_address1),
    .ce1(grp_sort_knn_fu_461_sorted_distances_V_ce1),
    .we1(grp_sort_knn_fu_461_sorted_distances_V_we1),
    .d1(grp_sort_knn_fu_461_sorted_distances_V_d1),
    .q1(sorted_distances_q1)
);

knn_vote_sorted_lcud #(
    .DataWidth( 4 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
sorted_labels_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sorted_labels_address0),
    .ce0(sorted_labels_ce0),
    .we0(sorted_labels_we0),
    .d0(grp_sort_knn_fu_461_sorted_labels_V_d0),
    .q0(sorted_labels_q0),
    .address1(grp_sort_knn_fu_461_sorted_labels_V_address1),
    .ce1(sorted_labels_ce1),
    .we1(sorted_labels_we1),
    .d1(grp_sort_knn_fu_461_sorted_labels_V_d1),
    .q1(sorted_labels_q1)
);

sort_knn grp_sort_knn_fu_461(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sort_knn_fu_461_ap_start),
    .ap_done(grp_sort_knn_fu_461_ap_done),
    .ap_idle(grp_sort_knn_fu_461_ap_idle),
    .ap_ready(grp_sort_knn_fu_461_ap_ready),
    .knn_set_0_0_V_read(knn_set_0_0_V_read),
    .knn_set_0_1_V_read(knn_set_0_1_V_read),
    .knn_set_0_2_V_read(knn_set_0_2_V_read),
    .knn_set_1_0_V_read(knn_set_1_0_V_read),
    .knn_set_1_1_V_read(knn_set_1_1_V_read),
    .knn_set_1_2_V_read(knn_set_1_2_V_read),
    .knn_set_2_0_V_read(knn_set_2_0_V_read),
    .knn_set_2_1_V_read(knn_set_2_1_V_read),
    .knn_set_2_2_V_read(knn_set_2_2_V_read),
    .knn_set_3_0_V_read(knn_set_3_0_V_read),
    .knn_set_3_1_V_read(knn_set_3_1_V_read),
    .knn_set_3_2_V_read(knn_set_3_2_V_read),
    .knn_set_4_0_V_read(knn_set_4_0_V_read),
    .knn_set_4_1_V_read(knn_set_4_1_V_read),
    .knn_set_4_2_V_read(knn_set_4_2_V_read),
    .knn_set_5_0_V_read(knn_set_5_0_V_read),
    .knn_set_5_1_V_read(knn_set_5_1_V_read),
    .knn_set_5_2_V_read(knn_set_5_2_V_read),
    .knn_set_6_0_V_read(knn_set_6_0_V_read),
    .knn_set_6_1_V_read(knn_set_6_1_V_read),
    .knn_set_6_2_V_read(knn_set_6_2_V_read),
    .knn_set_7_0_V_read(knn_set_7_0_V_read),
    .knn_set_7_1_V_read(knn_set_7_1_V_read),
    .knn_set_7_2_V_read(knn_set_7_2_V_read),
    .knn_set_8_0_V_read(knn_set_8_0_V_read),
    .knn_set_8_1_V_read(knn_set_8_1_V_read),
    .knn_set_8_2_V_read(knn_set_8_2_V_read),
    .knn_set_9_0_V_read(knn_set_9_0_V_read),
    .knn_set_9_1_V_read(knn_set_9_1_V_read),
    .knn_set_9_2_V_read(knn_set_9_2_V_read),
    .sorted_distances_V_address0(grp_sort_knn_fu_461_sorted_distances_V_address0),
    .sorted_distances_V_ce0(grp_sort_knn_fu_461_sorted_distances_V_ce0),
    .sorted_distances_V_we0(grp_sort_knn_fu_461_sorted_distances_V_we0),
    .sorted_distances_V_d0(grp_sort_knn_fu_461_sorted_distances_V_d0),
    .sorted_distances_V_q0(sorted_distances_q0),
    .sorted_distances_V_address1(grp_sort_knn_fu_461_sorted_distances_V_address1),
    .sorted_distances_V_ce1(grp_sort_knn_fu_461_sorted_distances_V_ce1),
    .sorted_distances_V_we1(grp_sort_knn_fu_461_sorted_distances_V_we1),
    .sorted_distances_V_d1(grp_sort_knn_fu_461_sorted_distances_V_d1),
    .sorted_distances_V_q1(sorted_distances_q1),
    .sorted_labels_V_address0(grp_sort_knn_fu_461_sorted_labels_V_address0),
    .sorted_labels_V_ce0(grp_sort_knn_fu_461_sorted_labels_V_ce0),
    .sorted_labels_V_we0(grp_sort_knn_fu_461_sorted_labels_V_we0),
    .sorted_labels_V_d0(grp_sort_knn_fu_461_sorted_labels_V_d0),
    .sorted_labels_V_q0(sorted_labels_q0),
    .sorted_labels_V_address1(grp_sort_knn_fu_461_sorted_labels_V_address1),
    .sorted_labels_V_ce1(grp_sort_knn_fu_461_sorted_labels_V_ce1),
    .sorted_labels_V_we1(grp_sort_knn_fu_461_sorted_labels_V_we1),
    .sorted_labels_V_d1(grp_sort_knn_fu_461_sorted_labels_V_d1),
    .sorted_labels_V_q1(sorted_labels_q1)
);

dut_mux_32_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 4 ))
dut_mux_32_4_1_1_U52(
    .din0(freqs_0_V_reg_407),
    .din1(freqs_1_V_3_reg_396),
    .din2(freqs_2_V_3_reg_385),
    .din3(i3_0_reg_373),
    .dout(tmp_4_fu_607_p5)
);

dut_mux_32_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 4 ))
dut_mux_32_4_1_1_U53(
    .din0(freqs_0_V_2_reg_363),
    .din1(freqs_1_V_2_reg_353),
    .din2(freqs_2_V_2_reg_343),
    .din3(tmp_3_fu_808_p4),
    .dout(tmp_3_fu_808_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 4'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_preg <= sorted_labels_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sort_knn_fu_461_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_sort_knn_fu_461_ap_start_reg <= 1'b1;
        end else if ((grp_sort_knn_fu_461_ap_ready == 1'b1)) begin
            grp_sort_knn_fu_461_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln164_fu_538_p2 == 1'd1))) begin
        freqs_0_V_2_reg_363 <= freqs_0_V_0_fu_106;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln171_fu_596_p2 == 1'd1))) begin
        freqs_0_V_2_reg_363 <= freqs_0_V_6_fu_683_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        freqs_0_V_reg_407 <= select_ln879_2_fu_768_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        freqs_0_V_reg_407 <= freqs_0_V_2_reg_363;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln164_fu_538_p2 == 1'd1))) begin
        freqs_1_V_2_reg_353 <= freqs_1_V_0_fu_110;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln171_fu_596_p2 == 1'd1))) begin
        freqs_1_V_2_reg_353 <= freqs_0_V_5_fu_675_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        freqs_1_V_3_reg_396 <= select_ln879_1_fu_760_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        freqs_1_V_3_reg_396 <= freqs_1_V_2_reg_353;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln164_fu_538_p2 == 1'd1))) begin
        freqs_2_V_2_reg_343 <= freqs_2_V_0_fu_114;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln171_fu_596_p2 == 1'd1))) begin
        freqs_2_V_2_reg_343 <= freqs_0_V_4_fu_659_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        freqs_2_V_3_reg_385 <= select_ln879_fu_752_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        freqs_2_V_3_reg_385 <= freqs_2_V_2_reg_343;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln164_fu_538_p2 == 1'd1))) begin
        i3_0_reg_373 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln171_fu_596_p2 == 1'd1))) begin
        i3_0_reg_373 <= i_3_reg_1048;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln164_fu_538_p2 == 1'd0))) begin
        i_0_reg_332 <= i_fu_544_p2;
    end else if (((grp_sort_knn_fu_461_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_332 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_0_in_reg_430 <= j_reg_1069;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_in_reg_430 <= zext_ln169_reg_1040;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln169_fu_569_p2 == 1'd1))) begin
        p_022_0_reg_439 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln182_fu_784_p2 == 1'd0))) begin
        p_022_0_reg_439 <= select_ln183_fu_830_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        t_V_reg_418 <= local_cnt_V_1_fu_776_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        t_V_reg_418 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln169_fu_569_p2 == 1'd1))) begin
        val_assign_reg_450 <= 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln182_fu_784_p2 == 1'd0))) begin
        val_assign_reg_450 <= i_2_fu_838_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_3_reg_1048 <= i_3_fu_575_p2;
        zext_ln169_reg_1040[1 : 0] <= zext_ln169_fu_565_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_1069 <= j_fu_590_p2;
        trunc_ln171_reg_1063 <= trunc_ln171_fu_586_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sorted_labels_load_1_reg_1058 <= sorted_labels_q0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return = sorted_labels_q0;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sorted_labels_address0 = zext_ln544_fu_844_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sorted_labels_address0 = sext_ln172_fu_602_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sorted_labels_address0 = zext_ln172_fu_581_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sorted_labels_address0 = grp_sort_knn_fu_461_sorted_labels_V_address0;
    end else begin
        sorted_labels_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        sorted_labels_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sorted_labels_ce0 = grp_sort_knn_fu_461_sorted_labels_V_ce0;
    end else begin
        sorted_labels_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sorted_labels_ce1 = grp_sort_knn_fu_461_sorted_labels_V_ce1;
    end else begin
        sorted_labels_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sorted_labels_we0 = grp_sort_knn_fu_461_sorted_labels_V_we0;
    end else begin
        sorted_labels_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sorted_labels_we1 = grp_sort_knn_fu_461_sorted_labels_V_we1;
    end else begin
        sorted_labels_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_sort_knn_fu_461_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln164_fu_538_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln169_fu_569_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln171_fu_596_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln182_fu_784_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_phi_mux_i_0_phi_fu_336_p4 = i_0_reg_332;

assign freqs_0_V_0_fu_106 = 4'd15;

assign freqs_0_V_3_fu_637_p3 = ((icmp_ln321_1_fu_631_p2[0:0] === 1'b1) ? t_V_reg_418 : freqs_0_V_reg_407);

assign freqs_0_V_4_fu_659_p3 = ((or_ln883_fu_645_p2[0:0] === 1'b1) ? freqs_2_V_3_reg_385 : select_ln883_fu_651_p3);

assign freqs_0_V_5_fu_675_p3 = ((or_ln883_fu_645_p2[0:0] === 1'b1) ? freqs_1_V_3_reg_396 : select_ln883_2_fu_667_p3);

assign freqs_0_V_6_fu_683_p3 = ((icmp_ln883_fu_619_p2[0:0] === 1'b1) ? freqs_0_V_reg_407 : freqs_0_V_3_fu_637_p3);

assign freqs_1_V_0_fu_110 = 4'd15;

assign freqs_2_V_0_fu_114 = 4'd15;

assign grp_sort_knn_fu_461_ap_start = grp_sort_knn_fu_461_ap_start_reg;

assign i_2_fu_838_p2 = (2'd1 + val_assign_reg_450);

assign i_3_fu_575_p2 = (i3_0_reg_373 + 2'd1);

assign i_fu_544_p2 = (i_0_reg_332 + 2'd1);

assign icmp_ln164_fu_538_p2 = ((i_0_reg_332 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln169_fu_569_p2 = ((i3_0_reg_373 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln171_fu_596_p2 = ((j_0_in_reg_430 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln182_fu_784_p2 = ((val_assign_reg_450 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln321_1_fu_631_p2 = ((i3_0_reg_373 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln321_2_fu_702_p2 = ((trunc_ln171_reg_1063 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln321_3_fu_715_p2 = ((trunc_ln171_reg_1063 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln321_fu_625_p2 = ((i3_0_reg_373 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_691_p2 = ((sorted_labels_load_1_reg_1058 == sorted_labels_q0) ? 1'b1 : 1'b0);

assign icmp_ln883_fu_619_p2 = ((tmp_4_fu_607_p5 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln895_2_fu_790_p2 = ((val_assign_reg_450 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_820_p2 = ((select_ln895_fu_796_p3 > tmp_3_fu_808_p5) ? 1'b1 : 1'b0);

assign j_fu_590_p2 = (32'd1 + j_0_in_reg_430);

assign local_cnt_V_1_fu_776_p3 = ((icmp_ln879_fu_691_p2[0:0] === 1'b1) ? local_cnt_V_fu_696_p2 : t_V_reg_418);

assign local_cnt_V_fu_696_p2 = (t_V_reg_418 + 4'd1);

assign max_idx_V_fu_826_p1 = val_assign_reg_450;

assign or_ln883_fu_645_p2 = (icmp_ln883_fu_619_p2 | icmp_ln321_1_fu_631_p2);

assign select_ln183_fu_830_p3 = ((icmp_ln895_fu_820_p2[0:0] === 1'b1) ? max_idx_V_fu_826_p1 : p_022_0_reg_439);

assign select_ln321_1_fu_720_p3 = ((icmp_ln321_3_fu_715_p2[0:0] === 1'b1) ? freqs_2_V_3_reg_385 : select_ln321_fu_707_p3);

assign select_ln321_2_fu_728_p3 = ((icmp_ln321_2_fu_702_p2[0:0] === 1'b1) ? 4'd0 : freqs_1_V_3_reg_396);

assign select_ln321_3_fu_736_p3 = ((icmp_ln321_3_fu_715_p2[0:0] === 1'b1) ? freqs_1_V_3_reg_396 : select_ln321_2_fu_728_p3);

assign select_ln321_4_fu_744_p3 = ((icmp_ln321_3_fu_715_p2[0:0] === 1'b1) ? 4'd0 : freqs_0_V_reg_407);

assign select_ln321_fu_707_p3 = ((icmp_ln321_2_fu_702_p2[0:0] === 1'b1) ? freqs_2_V_3_reg_385 : 4'd0);

assign select_ln879_1_fu_760_p3 = ((icmp_ln879_fu_691_p2[0:0] === 1'b1) ? select_ln321_3_fu_736_p3 : freqs_1_V_3_reg_396);

assign select_ln879_2_fu_768_p3 = ((icmp_ln879_fu_691_p2[0:0] === 1'b1) ? select_ln321_4_fu_744_p3 : freqs_0_V_reg_407);

assign select_ln879_fu_752_p3 = ((icmp_ln879_fu_691_p2[0:0] === 1'b1) ? select_ln321_1_fu_720_p3 : freqs_2_V_3_reg_385);

assign select_ln883_2_fu_667_p3 = ((icmp_ln321_fu_625_p2[0:0] === 1'b1) ? t_V_reg_418 : freqs_1_V_3_reg_396);

assign select_ln883_fu_651_p3 = ((icmp_ln321_fu_625_p2[0:0] === 1'b1) ? freqs_2_V_3_reg_385 : t_V_reg_418);

assign select_ln895_fu_796_p3 = ((icmp_ln895_2_fu_790_p2[0:0] === 1'b1) ? freqs_1_V_2_reg_353 : freqs_2_V_2_reg_343);

assign sext_ln172_fu_602_p1 = j_fu_590_p2;

assign tmp_3_fu_808_p4 = p_022_0_reg_439[1:0];

assign trunc_ln171_fu_586_p1 = j_0_in_reg_430[1:0];

assign zext_ln169_fu_565_p1 = i3_0_reg_373;

assign zext_ln172_fu_581_p1 = i3_0_reg_373;

assign zext_ln544_fu_844_p1 = p_022_0_reg_439;

always @ (posedge ap_clk) begin
    zext_ln169_reg_1040[31:2] <= 30'b000000000000000000000000000000;
end

endmodule //knn_vote
