-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity digitrec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V : IN STD_LOGIC_VECTOR (48 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of digitrec is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv11_708 : STD_LOGIC_VECTOR (10 downto 0) := "11100001000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal training_data_V_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal training_data_V_0_ce0 : STD_LOGIC;
    signal training_data_V_0_q0 : STD_LOGIC_VECTOR (45 downto 0);
    signal training_data_V_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal training_data_V_1_ce0 : STD_LOGIC;
    signal training_data_V_1_q0 : STD_LOGIC_VECTOR (45 downto 0);
    signal training_data_V_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal training_data_V_2_ce0 : STD_LOGIC;
    signal training_data_V_2_q0 : STD_LOGIC_VECTOR (46 downto 0);
    signal training_data_V_3_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal training_data_V_3_ce0 : STD_LOGIC;
    signal training_data_V_3_q0 : STD_LOGIC_VECTOR (46 downto 0);
    signal training_data_V_4_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal training_data_V_4_ce0 : STD_LOGIC;
    signal training_data_V_4_q0 : STD_LOGIC_VECTOR (45 downto 0);
    signal training_data_V_5_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal training_data_V_5_ce0 : STD_LOGIC;
    signal training_data_V_5_q0 : STD_LOGIC_VECTOR (44 downto 0);
    signal training_data_V_6_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal training_data_V_6_ce0 : STD_LOGIC;
    signal training_data_V_6_q0 : STD_LOGIC_VECTOR (47 downto 0);
    signal training_data_V_7_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal training_data_V_7_ce0 : STD_LOGIC;
    signal training_data_V_7_q0 : STD_LOGIC_VECTOR (41 downto 0);
    signal training_data_V_8_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal training_data_V_8_ce0 : STD_LOGIC;
    signal training_data_V_8_q0 : STD_LOGIC_VECTOR (44 downto 0);
    signal training_data_V_9_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal training_data_V_9_ce0 : STD_LOGIC;
    signal training_data_V_9_q0 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_1011_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_2137 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_fu_1023_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_2145 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_4_fu_1605_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_4_reg_2153 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln57_fu_1599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln63_fu_1625_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln63_reg_2208 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln63_1_fu_1630_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln63_1_reg_2213 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln63_2_fu_1635_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln63_2_reg_2218 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln63_3_fu_1640_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln63_3_reg_2223 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln63_4_fu_1645_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln63_4_reg_2228 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln63_5_fu_1650_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln63_5_reg_2233 : STD_LOGIC_VECTOR (47 downto 0);
    signal training_data_V_6_lo_reg_2238 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln63_6_fu_1655_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln63_6_reg_2243 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln63_7_fu_1660_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln63_7_reg_2248 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln63_8_fu_1665_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln63_8_reg_2253 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_update_knn_fu_734_ap_ready : STD_LOGIC;
    signal grp_update_knn_fu_734_ap_done : STD_LOGIC;
    signal grp_update_knn_fu_752_ap_ready : STD_LOGIC;
    signal grp_update_knn_fu_752_ap_done : STD_LOGIC;
    signal grp_update_knn_fu_770_ap_ready : STD_LOGIC;
    signal grp_update_knn_fu_770_ap_done : STD_LOGIC;
    signal grp_update_knn_fu_788_ap_ready : STD_LOGIC;
    signal grp_update_knn_fu_788_ap_done : STD_LOGIC;
    signal grp_update_knn_fu_806_ap_ready : STD_LOGIC;
    signal grp_update_knn_fu_806_ap_done : STD_LOGIC;
    signal grp_update_knn_fu_824_ap_ready : STD_LOGIC;
    signal grp_update_knn_fu_824_ap_done : STD_LOGIC;
    signal grp_update_knn_fu_842_ap_ready : STD_LOGIC;
    signal grp_update_knn_fu_842_ap_done : STD_LOGIC;
    signal grp_update_knn_fu_861_ap_ready : STD_LOGIC;
    signal grp_update_knn_fu_861_ap_done : STD_LOGIC;
    signal grp_update_knn_fu_879_ap_ready : STD_LOGIC;
    signal grp_update_knn_fu_879_ap_done : STD_LOGIC;
    signal grp_update_knn_fu_897_ap_ready : STD_LOGIC;
    signal grp_update_knn_fu_897_ap_done : STD_LOGIC;
    signal ap_block_state7_on_subcall_done : BOOLEAN;
    signal grp_knn_vote_fu_670_ap_start : STD_LOGIC;
    signal grp_knn_vote_fu_670_ap_done : STD_LOGIC;
    signal grp_knn_vote_fu_670_ap_idle : STD_LOGIC;
    signal grp_knn_vote_fu_670_ap_ready : STD_LOGIC;
    signal grp_knn_vote_fu_670_ap_return : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_update_knn_fu_734_ap_start : STD_LOGIC;
    signal grp_update_knn_fu_734_ap_idle : STD_LOGIC;
    signal grp_update_knn_fu_734_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_734_ap_return_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_734_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_752_ap_start : STD_LOGIC;
    signal grp_update_knn_fu_752_ap_idle : STD_LOGIC;
    signal grp_update_knn_fu_752_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_752_ap_return_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_752_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_770_ap_start : STD_LOGIC;
    signal grp_update_knn_fu_770_ap_idle : STD_LOGIC;
    signal grp_update_knn_fu_770_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_770_ap_return_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_770_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_788_ap_start : STD_LOGIC;
    signal grp_update_knn_fu_788_ap_idle : STD_LOGIC;
    signal grp_update_knn_fu_788_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_788_ap_return_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_788_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_806_ap_start : STD_LOGIC;
    signal grp_update_knn_fu_806_ap_idle : STD_LOGIC;
    signal grp_update_knn_fu_806_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_806_ap_return_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_806_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_824_ap_start : STD_LOGIC;
    signal grp_update_knn_fu_824_ap_idle : STD_LOGIC;
    signal grp_update_knn_fu_824_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_824_ap_return_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_824_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_842_ap_start : STD_LOGIC;
    signal grp_update_knn_fu_842_ap_idle : STD_LOGIC;
    signal grp_update_knn_fu_842_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_842_ap_return_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_842_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_861_ap_start : STD_LOGIC;
    signal grp_update_knn_fu_861_ap_idle : STD_LOGIC;
    signal grp_update_knn_fu_861_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_861_ap_return_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_861_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_879_ap_start : STD_LOGIC;
    signal grp_update_knn_fu_879_ap_idle : STD_LOGIC;
    signal grp_update_knn_fu_879_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_879_ap_return_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_879_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_897_ap_start : STD_LOGIC;
    signal grp_update_knn_fu_897_ap_idle : STD_LOGIC;
    signal grp_update_knn_fu_897_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_897_ap_return_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_knn_fu_897_ap_return_2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_reg_336 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln52_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_0_reg_348 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln51_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal knn_set_9_2_V_3_reg_359 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_9_1_V_3_reg_369 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_9_0_V_3_reg_379 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_8_2_V_3_reg_389 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_8_1_V_3_reg_399 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_8_0_V_3_reg_409 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_7_2_V_3_reg_419 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_7_1_V_3_reg_429 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_7_0_V_3_reg_439 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_6_2_V_3_reg_449 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_6_1_V_3_reg_459 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_6_0_V_3_reg_469 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_5_2_V_3_reg_479 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_5_1_V_3_reg_489 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_5_0_V_3_reg_499 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_4_2_V_3_reg_509 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_4_1_V_3_reg_519 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_4_0_V_3_reg_529 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_3_2_V_3_reg_539 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_3_1_V_3_reg_549 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_3_0_V_3_reg_559 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_2_V_3_reg_569 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_1_V_3_reg_579 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_0_V_3_reg_589 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_2_V_3_reg_599 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_1_V_3_reg_609 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_0_V_3_reg_619 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_2_V_3_reg_629 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_1_V_3_reg_639 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_0_V_3_reg_649 : STD_LOGIC_VECTOR (5 downto 0);
    signal i4_0_reg_659 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_knn_vote_fu_670_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_update_knn_fu_734_ap_start_reg : STD_LOGIC := '0';
    signal grp_update_knn_fu_752_ap_start_reg : STD_LOGIC := '0';
    signal grp_update_knn_fu_770_ap_start_reg : STD_LOGIC := '0';
    signal grp_update_knn_fu_788_ap_start_reg : STD_LOGIC := '0';
    signal grp_update_knn_fu_806_ap_start_reg : STD_LOGIC := '0';
    signal grp_update_knn_fu_824_ap_start_reg : STD_LOGIC := '0';
    signal grp_update_knn_fu_842_ap_start_reg : STD_LOGIC := '0';
    signal grp_update_knn_fu_861_ap_start_reg : STD_LOGIC := '0';
    signal grp_update_knn_fu_879_ap_start_reg : STD_LOGIC := '0';
    signal grp_update_knn_fu_897_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln61_fu_1611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal knn_set_0_0_V_0_fu_80 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_0_V_4_fu_1485_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_1_V_0_fu_84 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_1_V_4_fu_1499_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_2_V_0_fu_88 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_0_2_V_4_fu_1513_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_0_V_0_fu_92 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_0_V_4_fu_1428_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_1_V_0_fu_96 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_1_V_4_fu_1442_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_2_V_0_fu_100 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_1_2_V_4_fu_1456_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_0_V_0_fu_104 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_0_V_4_fu_1371_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_1_V_0_fu_108 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_1_V_4_fu_1385_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_2_V_0_fu_112 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_2_2_V_4_fu_1399_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_3_0_V_0_fu_116 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_3_0_V_4_fu_1314_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_3_1_V_0_fu_120 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_3_1_V_4_fu_1328_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_3_2_V_0_fu_124 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_3_2_V_4_fu_1342_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_4_0_V_0_fu_128 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_4_0_V_4_fu_1257_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_4_1_V_0_fu_132 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_4_1_V_4_fu_1271_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_4_2_V_0_fu_136 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_4_2_V_4_fu_1285_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_5_0_V_0_fu_140 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_5_0_V_4_fu_1200_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_5_1_V_0_fu_144 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_5_1_V_4_fu_1214_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_5_2_V_0_fu_148 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_5_2_V_4_fu_1228_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_6_0_V_0_fu_152 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_6_0_V_4_fu_1143_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_6_1_V_0_fu_156 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_6_1_V_4_fu_1157_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_6_2_V_0_fu_160 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_6_2_V_4_fu_1171_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_7_0_V_0_fu_164 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_7_0_V_4_fu_1086_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_7_1_V_0_fu_168 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_7_1_V_4_fu_1100_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_7_2_V_0_fu_172 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_7_2_V_4_fu_1114_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_8_0_V_0_fu_176 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_8_0_V_4_fu_1029_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_8_1_V_0_fu_180 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_8_1_V_4_fu_1043_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_8_2_V_0_fu_184 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_8_2_V_4_fu_1057_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_9_0_V_0_fu_188 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_9_0_V_4_fu_1542_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_9_1_V_0_fu_192 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_9_1_V_4_fu_1556_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_9_2_V_0_fu_196 : STD_LOGIC_VECTOR (5 downto 0);
    signal knn_set_9_2_V_4_fu_1570_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component knn_vote IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        knn_set_0_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_0_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_0_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_1_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_1_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_1_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_2_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_2_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_2_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_3_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_3_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_3_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_4_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_4_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_4_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_5_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_5_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_5_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_6_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_6_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_6_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_7_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_7_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_7_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_8_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_8_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_8_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_9_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_9_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_9_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component update_knn IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        test_inst_V : IN STD_LOGIC_VECTOR (48 downto 0);
        train_inst_V : IN STD_LOGIC_VECTOR (47 downto 0);
        min_distances_0_V_r_2 : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_0_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_1_V_r_2 : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_1_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_2_V_r_2 : IN STD_LOGIC_VECTOR (5 downto 0);
        min_distances_2_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component dut_mux_42_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (5 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component digitrec_trainingdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component digitrec_trainingeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component digitrec_trainingfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component digitrec_trainingg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component digitrec_traininghbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component digitrec_trainingibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component digitrec_trainingjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component digitrec_trainingkbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component digitrec_traininglbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component digitrec_trainingmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;



begin
    training_data_V_0_U : component digitrec_trainingdEe
    generic map (
        DataWidth => 46,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_data_V_0_address0,
        ce0 => training_data_V_0_ce0,
        q0 => training_data_V_0_q0);

    training_data_V_1_U : component digitrec_trainingeOg
    generic map (
        DataWidth => 46,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_data_V_1_address0,
        ce0 => training_data_V_1_ce0,
        q0 => training_data_V_1_q0);

    training_data_V_2_U : component digitrec_trainingfYi
    generic map (
        DataWidth => 47,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_data_V_2_address0,
        ce0 => training_data_V_2_ce0,
        q0 => training_data_V_2_q0);

    training_data_V_3_U : component digitrec_trainingg8j
    generic map (
        DataWidth => 47,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_data_V_3_address0,
        ce0 => training_data_V_3_ce0,
        q0 => training_data_V_3_q0);

    training_data_V_4_U : component digitrec_traininghbi
    generic map (
        DataWidth => 46,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_data_V_4_address0,
        ce0 => training_data_V_4_ce0,
        q0 => training_data_V_4_q0);

    training_data_V_5_U : component digitrec_trainingibs
    generic map (
        DataWidth => 45,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_data_V_5_address0,
        ce0 => training_data_V_5_ce0,
        q0 => training_data_V_5_q0);

    training_data_V_6_U : component digitrec_trainingjbC
    generic map (
        DataWidth => 48,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_data_V_6_address0,
        ce0 => training_data_V_6_ce0,
        q0 => training_data_V_6_q0);

    training_data_V_7_U : component digitrec_trainingkbM
    generic map (
        DataWidth => 42,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_data_V_7_address0,
        ce0 => training_data_V_7_ce0,
        q0 => training_data_V_7_q0);

    training_data_V_8_U : component digitrec_traininglbW
    generic map (
        DataWidth => 45,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_data_V_8_address0,
        ce0 => training_data_V_8_ce0,
        q0 => training_data_V_8_q0);

    training_data_V_9_U : component digitrec_trainingmb6
    generic map (
        DataWidth => 41,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_data_V_9_address0,
        ce0 => training_data_V_9_ce0,
        q0 => training_data_V_9_q0);

    grp_knn_vote_fu_670 : component knn_vote
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_knn_vote_fu_670_ap_start,
        ap_done => grp_knn_vote_fu_670_ap_done,
        ap_idle => grp_knn_vote_fu_670_ap_idle,
        ap_ready => grp_knn_vote_fu_670_ap_ready,
        knn_set_0_0_V_read => knn_set_0_0_V_3_reg_649,
        knn_set_0_1_V_read => knn_set_0_1_V_3_reg_639,
        knn_set_0_2_V_read => knn_set_0_2_V_3_reg_629,
        knn_set_1_0_V_read => knn_set_1_0_V_3_reg_619,
        knn_set_1_1_V_read => knn_set_1_1_V_3_reg_609,
        knn_set_1_2_V_read => knn_set_1_2_V_3_reg_599,
        knn_set_2_0_V_read => knn_set_2_0_V_3_reg_589,
        knn_set_2_1_V_read => knn_set_2_1_V_3_reg_579,
        knn_set_2_2_V_read => knn_set_2_2_V_3_reg_569,
        knn_set_3_0_V_read => knn_set_3_0_V_3_reg_559,
        knn_set_3_1_V_read => knn_set_3_1_V_3_reg_549,
        knn_set_3_2_V_read => knn_set_3_2_V_3_reg_539,
        knn_set_4_0_V_read => knn_set_4_0_V_3_reg_529,
        knn_set_4_1_V_read => knn_set_4_1_V_3_reg_519,
        knn_set_4_2_V_read => knn_set_4_2_V_3_reg_509,
        knn_set_5_0_V_read => knn_set_5_0_V_3_reg_499,
        knn_set_5_1_V_read => knn_set_5_1_V_3_reg_489,
        knn_set_5_2_V_read => knn_set_5_2_V_3_reg_479,
        knn_set_6_0_V_read => knn_set_6_0_V_3_reg_469,
        knn_set_6_1_V_read => knn_set_6_1_V_3_reg_459,
        knn_set_6_2_V_read => knn_set_6_2_V_3_reg_449,
        knn_set_7_0_V_read => knn_set_7_0_V_3_reg_439,
        knn_set_7_1_V_read => knn_set_7_1_V_3_reg_429,
        knn_set_7_2_V_read => knn_set_7_2_V_3_reg_419,
        knn_set_8_0_V_read => knn_set_8_0_V_3_reg_409,
        knn_set_8_1_V_read => knn_set_8_1_V_3_reg_399,
        knn_set_8_2_V_read => knn_set_8_2_V_3_reg_389,
        knn_set_9_0_V_read => knn_set_9_0_V_3_reg_379,
        knn_set_9_1_V_read => knn_set_9_1_V_3_reg_369,
        knn_set_9_2_V_read => knn_set_9_2_V_3_reg_359,
        ap_return => grp_knn_vote_fu_670_ap_return);

    grp_update_knn_fu_734 : component update_knn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_knn_fu_734_ap_start,
        ap_done => grp_update_knn_fu_734_ap_done,
        ap_idle => grp_update_knn_fu_734_ap_idle,
        ap_ready => grp_update_knn_fu_734_ap_ready,
        test_inst_V => input_V,
        train_inst_V => zext_ln63_reg_2208,
        min_distances_0_V_r_2 => knn_set_0_0_V_3_reg_649,
        min_distances_0_V_r => knn_set_0_0_V_3_reg_649,
        min_distances_1_V_r_2 => knn_set_0_1_V_3_reg_639,
        min_distances_1_V_r => knn_set_0_1_V_3_reg_639,
        min_distances_2_V_r_2 => knn_set_0_2_V_3_reg_629,
        min_distances_2_V_r => knn_set_0_2_V_3_reg_629,
        ap_return_0 => grp_update_knn_fu_734_ap_return_0,
        ap_return_1 => grp_update_knn_fu_734_ap_return_1,
        ap_return_2 => grp_update_knn_fu_734_ap_return_2);

    grp_update_knn_fu_752 : component update_knn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_knn_fu_752_ap_start,
        ap_done => grp_update_knn_fu_752_ap_done,
        ap_idle => grp_update_knn_fu_752_ap_idle,
        ap_ready => grp_update_knn_fu_752_ap_ready,
        test_inst_V => input_V,
        train_inst_V => zext_ln63_1_reg_2213,
        min_distances_0_V_r_2 => knn_set_1_0_V_3_reg_619,
        min_distances_0_V_r => knn_set_1_0_V_3_reg_619,
        min_distances_1_V_r_2 => knn_set_1_1_V_3_reg_609,
        min_distances_1_V_r => knn_set_1_1_V_3_reg_609,
        min_distances_2_V_r_2 => knn_set_1_2_V_3_reg_599,
        min_distances_2_V_r => knn_set_1_2_V_3_reg_599,
        ap_return_0 => grp_update_knn_fu_752_ap_return_0,
        ap_return_1 => grp_update_knn_fu_752_ap_return_1,
        ap_return_2 => grp_update_knn_fu_752_ap_return_2);

    grp_update_knn_fu_770 : component update_knn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_knn_fu_770_ap_start,
        ap_done => grp_update_knn_fu_770_ap_done,
        ap_idle => grp_update_knn_fu_770_ap_idle,
        ap_ready => grp_update_knn_fu_770_ap_ready,
        test_inst_V => input_V,
        train_inst_V => zext_ln63_2_reg_2218,
        min_distances_0_V_r_2 => knn_set_2_0_V_3_reg_589,
        min_distances_0_V_r => knn_set_2_0_V_3_reg_589,
        min_distances_1_V_r_2 => knn_set_2_1_V_3_reg_579,
        min_distances_1_V_r => knn_set_2_1_V_3_reg_579,
        min_distances_2_V_r_2 => knn_set_2_2_V_3_reg_569,
        min_distances_2_V_r => knn_set_2_2_V_3_reg_569,
        ap_return_0 => grp_update_knn_fu_770_ap_return_0,
        ap_return_1 => grp_update_knn_fu_770_ap_return_1,
        ap_return_2 => grp_update_knn_fu_770_ap_return_2);

    grp_update_knn_fu_788 : component update_knn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_knn_fu_788_ap_start,
        ap_done => grp_update_knn_fu_788_ap_done,
        ap_idle => grp_update_knn_fu_788_ap_idle,
        ap_ready => grp_update_knn_fu_788_ap_ready,
        test_inst_V => input_V,
        train_inst_V => zext_ln63_3_reg_2223,
        min_distances_0_V_r_2 => knn_set_3_0_V_3_reg_559,
        min_distances_0_V_r => knn_set_3_0_V_3_reg_559,
        min_distances_1_V_r_2 => knn_set_3_1_V_3_reg_549,
        min_distances_1_V_r => knn_set_3_1_V_3_reg_549,
        min_distances_2_V_r_2 => knn_set_3_2_V_3_reg_539,
        min_distances_2_V_r => knn_set_3_2_V_3_reg_539,
        ap_return_0 => grp_update_knn_fu_788_ap_return_0,
        ap_return_1 => grp_update_knn_fu_788_ap_return_1,
        ap_return_2 => grp_update_knn_fu_788_ap_return_2);

    grp_update_knn_fu_806 : component update_knn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_knn_fu_806_ap_start,
        ap_done => grp_update_knn_fu_806_ap_done,
        ap_idle => grp_update_knn_fu_806_ap_idle,
        ap_ready => grp_update_knn_fu_806_ap_ready,
        test_inst_V => input_V,
        train_inst_V => zext_ln63_4_reg_2228,
        min_distances_0_V_r_2 => knn_set_4_0_V_3_reg_529,
        min_distances_0_V_r => knn_set_4_0_V_3_reg_529,
        min_distances_1_V_r_2 => knn_set_4_1_V_3_reg_519,
        min_distances_1_V_r => knn_set_4_1_V_3_reg_519,
        min_distances_2_V_r_2 => knn_set_4_2_V_3_reg_509,
        min_distances_2_V_r => knn_set_4_2_V_3_reg_509,
        ap_return_0 => grp_update_knn_fu_806_ap_return_0,
        ap_return_1 => grp_update_knn_fu_806_ap_return_1,
        ap_return_2 => grp_update_knn_fu_806_ap_return_2);

    grp_update_knn_fu_824 : component update_knn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_knn_fu_824_ap_start,
        ap_done => grp_update_knn_fu_824_ap_done,
        ap_idle => grp_update_knn_fu_824_ap_idle,
        ap_ready => grp_update_knn_fu_824_ap_ready,
        test_inst_V => input_V,
        train_inst_V => zext_ln63_5_reg_2233,
        min_distances_0_V_r_2 => knn_set_5_0_V_3_reg_499,
        min_distances_0_V_r => knn_set_5_0_V_3_reg_499,
        min_distances_1_V_r_2 => knn_set_5_1_V_3_reg_489,
        min_distances_1_V_r => knn_set_5_1_V_3_reg_489,
        min_distances_2_V_r_2 => knn_set_5_2_V_3_reg_479,
        min_distances_2_V_r => knn_set_5_2_V_3_reg_479,
        ap_return_0 => grp_update_knn_fu_824_ap_return_0,
        ap_return_1 => grp_update_knn_fu_824_ap_return_1,
        ap_return_2 => grp_update_knn_fu_824_ap_return_2);

    grp_update_knn_fu_842 : component update_knn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_knn_fu_842_ap_start,
        ap_done => grp_update_knn_fu_842_ap_done,
        ap_idle => grp_update_knn_fu_842_ap_idle,
        ap_ready => grp_update_knn_fu_842_ap_ready,
        test_inst_V => input_V,
        train_inst_V => training_data_V_6_lo_reg_2238,
        min_distances_0_V_r_2 => knn_set_6_0_V_3_reg_469,
        min_distances_0_V_r => knn_set_6_0_V_3_reg_469,
        min_distances_1_V_r_2 => knn_set_6_1_V_3_reg_459,
        min_distances_1_V_r => knn_set_6_1_V_3_reg_459,
        min_distances_2_V_r_2 => knn_set_6_2_V_3_reg_449,
        min_distances_2_V_r => knn_set_6_2_V_3_reg_449,
        ap_return_0 => grp_update_knn_fu_842_ap_return_0,
        ap_return_1 => grp_update_knn_fu_842_ap_return_1,
        ap_return_2 => grp_update_knn_fu_842_ap_return_2);

    grp_update_knn_fu_861 : component update_knn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_knn_fu_861_ap_start,
        ap_done => grp_update_knn_fu_861_ap_done,
        ap_idle => grp_update_knn_fu_861_ap_idle,
        ap_ready => grp_update_knn_fu_861_ap_ready,
        test_inst_V => input_V,
        train_inst_V => zext_ln63_6_reg_2243,
        min_distances_0_V_r_2 => knn_set_7_0_V_3_reg_439,
        min_distances_0_V_r => knn_set_7_0_V_3_reg_439,
        min_distances_1_V_r_2 => knn_set_7_1_V_3_reg_429,
        min_distances_1_V_r => knn_set_7_1_V_3_reg_429,
        min_distances_2_V_r_2 => knn_set_7_2_V_3_reg_419,
        min_distances_2_V_r => knn_set_7_2_V_3_reg_419,
        ap_return_0 => grp_update_knn_fu_861_ap_return_0,
        ap_return_1 => grp_update_knn_fu_861_ap_return_1,
        ap_return_2 => grp_update_knn_fu_861_ap_return_2);

    grp_update_knn_fu_879 : component update_knn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_knn_fu_879_ap_start,
        ap_done => grp_update_knn_fu_879_ap_done,
        ap_idle => grp_update_knn_fu_879_ap_idle,
        ap_ready => grp_update_knn_fu_879_ap_ready,
        test_inst_V => input_V,
        train_inst_V => zext_ln63_7_reg_2248,
        min_distances_0_V_r_2 => knn_set_8_0_V_3_reg_409,
        min_distances_0_V_r => knn_set_8_0_V_3_reg_409,
        min_distances_1_V_r_2 => knn_set_8_1_V_3_reg_399,
        min_distances_1_V_r => knn_set_8_1_V_3_reg_399,
        min_distances_2_V_r_2 => knn_set_8_2_V_3_reg_389,
        min_distances_2_V_r => knn_set_8_2_V_3_reg_389,
        ap_return_0 => grp_update_knn_fu_879_ap_return_0,
        ap_return_1 => grp_update_knn_fu_879_ap_return_1,
        ap_return_2 => grp_update_knn_fu_879_ap_return_2);

    grp_update_knn_fu_897 : component update_knn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_knn_fu_897_ap_start,
        ap_done => grp_update_knn_fu_897_ap_done,
        ap_idle => grp_update_knn_fu_897_ap_idle,
        ap_ready => grp_update_knn_fu_897_ap_ready,
        test_inst_V => input_V,
        train_inst_V => zext_ln63_8_reg_2253,
        min_distances_0_V_r_2 => knn_set_9_0_V_3_reg_379,
        min_distances_0_V_r => knn_set_9_0_V_3_reg_379,
        min_distances_1_V_r_2 => knn_set_9_1_V_3_reg_369,
        min_distances_1_V_r => knn_set_9_1_V_3_reg_369,
        min_distances_2_V_r_2 => knn_set_9_2_V_3_reg_359,
        min_distances_2_V_r => knn_set_9_2_V_3_reg_359,
        ap_return_0 => grp_update_knn_fu_897_ap_return_0,
        ap_return_1 => grp_update_knn_fu_897_ap_return_1,
        ap_return_2 => grp_update_knn_fu_897_ap_return_2);

    dut_mux_42_6_1_1_U87 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_8_0_V_0_fu_176,
        din2 => knn_set_8_0_V_0_fu_176,
        din3 => knn_set_8_0_V_0_fu_176,
        din4 => k_0_reg_348,
        dout => knn_set_8_0_V_4_fu_1029_p6);

    dut_mux_42_6_1_1_U88 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_8_1_V_0_fu_180,
        din1 => ap_const_lv6_32,
        din2 => knn_set_8_1_V_0_fu_180,
        din3 => knn_set_8_1_V_0_fu_180,
        din4 => k_0_reg_348,
        dout => knn_set_8_1_V_4_fu_1043_p6);

    dut_mux_42_6_1_1_U89 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_8_2_V_0_fu_184,
        din1 => knn_set_8_2_V_0_fu_184,
        din2 => ap_const_lv6_32,
        din3 => ap_const_lv6_32,
        din4 => k_0_reg_348,
        dout => knn_set_8_2_V_4_fu_1057_p6);

    dut_mux_42_6_1_1_U90 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_7_0_V_0_fu_164,
        din2 => knn_set_7_0_V_0_fu_164,
        din3 => knn_set_7_0_V_0_fu_164,
        din4 => k_0_reg_348,
        dout => knn_set_7_0_V_4_fu_1086_p6);

    dut_mux_42_6_1_1_U91 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_7_1_V_0_fu_168,
        din1 => ap_const_lv6_32,
        din2 => knn_set_7_1_V_0_fu_168,
        din3 => knn_set_7_1_V_0_fu_168,
        din4 => k_0_reg_348,
        dout => knn_set_7_1_V_4_fu_1100_p6);

    dut_mux_42_6_1_1_U92 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_7_2_V_0_fu_172,
        din1 => knn_set_7_2_V_0_fu_172,
        din2 => ap_const_lv6_32,
        din3 => ap_const_lv6_32,
        din4 => k_0_reg_348,
        dout => knn_set_7_2_V_4_fu_1114_p6);

    dut_mux_42_6_1_1_U93 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_6_0_V_0_fu_152,
        din2 => knn_set_6_0_V_0_fu_152,
        din3 => knn_set_6_0_V_0_fu_152,
        din4 => k_0_reg_348,
        dout => knn_set_6_0_V_4_fu_1143_p6);

    dut_mux_42_6_1_1_U94 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_6_1_V_0_fu_156,
        din1 => ap_const_lv6_32,
        din2 => knn_set_6_1_V_0_fu_156,
        din3 => knn_set_6_1_V_0_fu_156,
        din4 => k_0_reg_348,
        dout => knn_set_6_1_V_4_fu_1157_p6);

    dut_mux_42_6_1_1_U95 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_6_2_V_0_fu_160,
        din1 => knn_set_6_2_V_0_fu_160,
        din2 => ap_const_lv6_32,
        din3 => ap_const_lv6_32,
        din4 => k_0_reg_348,
        dout => knn_set_6_2_V_4_fu_1171_p6);

    dut_mux_42_6_1_1_U96 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_5_0_V_0_fu_140,
        din2 => knn_set_5_0_V_0_fu_140,
        din3 => knn_set_5_0_V_0_fu_140,
        din4 => k_0_reg_348,
        dout => knn_set_5_0_V_4_fu_1200_p6);

    dut_mux_42_6_1_1_U97 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_5_1_V_0_fu_144,
        din1 => ap_const_lv6_32,
        din2 => knn_set_5_1_V_0_fu_144,
        din3 => knn_set_5_1_V_0_fu_144,
        din4 => k_0_reg_348,
        dout => knn_set_5_1_V_4_fu_1214_p6);

    dut_mux_42_6_1_1_U98 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_5_2_V_0_fu_148,
        din1 => knn_set_5_2_V_0_fu_148,
        din2 => ap_const_lv6_32,
        din3 => ap_const_lv6_32,
        din4 => k_0_reg_348,
        dout => knn_set_5_2_V_4_fu_1228_p6);

    dut_mux_42_6_1_1_U99 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_4_0_V_0_fu_128,
        din2 => knn_set_4_0_V_0_fu_128,
        din3 => knn_set_4_0_V_0_fu_128,
        din4 => k_0_reg_348,
        dout => knn_set_4_0_V_4_fu_1257_p6);

    dut_mux_42_6_1_1_U100 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_4_1_V_0_fu_132,
        din1 => ap_const_lv6_32,
        din2 => knn_set_4_1_V_0_fu_132,
        din3 => knn_set_4_1_V_0_fu_132,
        din4 => k_0_reg_348,
        dout => knn_set_4_1_V_4_fu_1271_p6);

    dut_mux_42_6_1_1_U101 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_4_2_V_0_fu_136,
        din1 => knn_set_4_2_V_0_fu_136,
        din2 => ap_const_lv6_32,
        din3 => ap_const_lv6_32,
        din4 => k_0_reg_348,
        dout => knn_set_4_2_V_4_fu_1285_p6);

    dut_mux_42_6_1_1_U102 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_3_0_V_0_fu_116,
        din2 => knn_set_3_0_V_0_fu_116,
        din3 => knn_set_3_0_V_0_fu_116,
        din4 => k_0_reg_348,
        dout => knn_set_3_0_V_4_fu_1314_p6);

    dut_mux_42_6_1_1_U103 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_3_1_V_0_fu_120,
        din1 => ap_const_lv6_32,
        din2 => knn_set_3_1_V_0_fu_120,
        din3 => knn_set_3_1_V_0_fu_120,
        din4 => k_0_reg_348,
        dout => knn_set_3_1_V_4_fu_1328_p6);

    dut_mux_42_6_1_1_U104 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_3_2_V_0_fu_124,
        din1 => knn_set_3_2_V_0_fu_124,
        din2 => ap_const_lv6_32,
        din3 => ap_const_lv6_32,
        din4 => k_0_reg_348,
        dout => knn_set_3_2_V_4_fu_1342_p6);

    dut_mux_42_6_1_1_U105 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_2_0_V_0_fu_104,
        din2 => knn_set_2_0_V_0_fu_104,
        din3 => knn_set_2_0_V_0_fu_104,
        din4 => k_0_reg_348,
        dout => knn_set_2_0_V_4_fu_1371_p6);

    dut_mux_42_6_1_1_U106 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_2_1_V_0_fu_108,
        din1 => ap_const_lv6_32,
        din2 => knn_set_2_1_V_0_fu_108,
        din3 => knn_set_2_1_V_0_fu_108,
        din4 => k_0_reg_348,
        dout => knn_set_2_1_V_4_fu_1385_p6);

    dut_mux_42_6_1_1_U107 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_2_2_V_0_fu_112,
        din1 => knn_set_2_2_V_0_fu_112,
        din2 => ap_const_lv6_32,
        din3 => ap_const_lv6_32,
        din4 => k_0_reg_348,
        dout => knn_set_2_2_V_4_fu_1399_p6);

    dut_mux_42_6_1_1_U108 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_1_0_V_0_fu_92,
        din2 => knn_set_1_0_V_0_fu_92,
        din3 => knn_set_1_0_V_0_fu_92,
        din4 => k_0_reg_348,
        dout => knn_set_1_0_V_4_fu_1428_p6);

    dut_mux_42_6_1_1_U109 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_1_1_V_0_fu_96,
        din1 => ap_const_lv6_32,
        din2 => knn_set_1_1_V_0_fu_96,
        din3 => knn_set_1_1_V_0_fu_96,
        din4 => k_0_reg_348,
        dout => knn_set_1_1_V_4_fu_1442_p6);

    dut_mux_42_6_1_1_U110 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_1_2_V_0_fu_100,
        din1 => knn_set_1_2_V_0_fu_100,
        din2 => ap_const_lv6_32,
        din3 => ap_const_lv6_32,
        din4 => k_0_reg_348,
        dout => knn_set_1_2_V_4_fu_1456_p6);

    dut_mux_42_6_1_1_U111 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_0_0_V_0_fu_80,
        din2 => knn_set_0_0_V_0_fu_80,
        din3 => knn_set_0_0_V_0_fu_80,
        din4 => k_0_reg_348,
        dout => knn_set_0_0_V_4_fu_1485_p6);

    dut_mux_42_6_1_1_U112 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_0_1_V_0_fu_84,
        din1 => ap_const_lv6_32,
        din2 => knn_set_0_1_V_0_fu_84,
        din3 => knn_set_0_1_V_0_fu_84,
        din4 => k_0_reg_348,
        dout => knn_set_0_1_V_4_fu_1499_p6);

    dut_mux_42_6_1_1_U113 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_0_2_V_0_fu_88,
        din1 => knn_set_0_2_V_0_fu_88,
        din2 => ap_const_lv6_32,
        din3 => ap_const_lv6_32,
        din4 => k_0_reg_348,
        dout => knn_set_0_2_V_4_fu_1513_p6);

    dut_mux_42_6_1_1_U114 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_32,
        din1 => knn_set_9_0_V_0_fu_188,
        din2 => knn_set_9_0_V_0_fu_188,
        din3 => knn_set_9_0_V_0_fu_188,
        din4 => k_0_reg_348,
        dout => knn_set_9_0_V_4_fu_1542_p6);

    dut_mux_42_6_1_1_U115 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_9_1_V_0_fu_192,
        din1 => ap_const_lv6_32,
        din2 => knn_set_9_1_V_0_fu_192,
        din3 => knn_set_9_1_V_0_fu_192,
        din4 => k_0_reg_348,
        dout => knn_set_9_1_V_4_fu_1556_p6);

    dut_mux_42_6_1_1_U116 : component dut_mux_42_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => knn_set_9_2_V_0_fu_196,
        din1 => knn_set_9_2_V_0_fu_196,
        din2 => ap_const_lv6_32,
        din3 => ap_const_lv6_32,
        din4 => k_0_reg_348,
        dout => knn_set_9_2_V_4_fu_1570_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv4_0;
            else
                if (((grp_knn_vote_fu_670_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_return_preg <= grp_knn_vote_fu_670_ap_return;
                end if; 
            end if;
        end if;
    end process;


    grp_knn_vote_fu_670_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_knn_vote_fu_670_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln57_fu_1599_p2 = ap_const_lv1_1))) then 
                    grp_knn_vote_fu_670_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_knn_vote_fu_670_ap_ready = ap_const_logic_1)) then 
                    grp_knn_vote_fu_670_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_update_knn_fu_734_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_knn_fu_734_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_update_knn_fu_734_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_knn_fu_734_ap_ready = ap_const_logic_1)) then 
                    grp_update_knn_fu_734_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_update_knn_fu_752_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_knn_fu_752_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_update_knn_fu_752_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_knn_fu_752_ap_ready = ap_const_logic_1)) then 
                    grp_update_knn_fu_752_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_update_knn_fu_770_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_knn_fu_770_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_update_knn_fu_770_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_knn_fu_770_ap_ready = ap_const_logic_1)) then 
                    grp_update_knn_fu_770_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_update_knn_fu_788_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_knn_fu_788_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_update_knn_fu_788_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_knn_fu_788_ap_ready = ap_const_logic_1)) then 
                    grp_update_knn_fu_788_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_update_knn_fu_806_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_knn_fu_806_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_update_knn_fu_806_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_knn_fu_806_ap_ready = ap_const_logic_1)) then 
                    grp_update_knn_fu_806_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_update_knn_fu_824_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_knn_fu_824_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_update_knn_fu_824_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_knn_fu_824_ap_ready = ap_const_logic_1)) then 
                    grp_update_knn_fu_824_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_update_knn_fu_842_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_knn_fu_842_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_update_knn_fu_842_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_knn_fu_842_ap_ready = ap_const_logic_1)) then 
                    grp_update_knn_fu_842_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_update_knn_fu_861_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_knn_fu_861_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_update_knn_fu_861_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_knn_fu_861_ap_ready = ap_const_logic_1)) then 
                    grp_update_knn_fu_861_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_update_knn_fu_879_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_knn_fu_879_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_update_knn_fu_879_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_knn_fu_879_ap_ready = ap_const_logic_1)) then 
                    grp_update_knn_fu_879_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_update_knn_fu_897_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_knn_fu_897_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_update_knn_fu_897_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_knn_fu_897_ap_ready = ap_const_logic_1)) then 
                    grp_update_knn_fu_897_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i4_0_reg_659_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i4_0_reg_659 <= ap_const_lv11_0;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i4_0_reg_659 <= i_4_reg_2153;
            end if; 
        end if;
    end process;

    i_0_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_1017_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_336 <= i_reg_2137;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_336 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln51_fu_1005_p2 = ap_const_lv1_0))) then 
                k_0_reg_348 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                k_0_reg_348 <= k_reg_2145;
            end if; 
        end if;
    end process;

    knn_set_0_0_V_3_reg_649_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_0_0_V_3_reg_649 <= knn_set_0_0_V_0_fu_80;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_0_0_V_3_reg_649 <= grp_update_knn_fu_734_ap_return_0;
            end if; 
        end if;
    end process;

    knn_set_0_1_V_3_reg_639_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_0_1_V_3_reg_639 <= knn_set_0_1_V_0_fu_84;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_0_1_V_3_reg_639 <= grp_update_knn_fu_734_ap_return_1;
            end if; 
        end if;
    end process;

    knn_set_0_2_V_3_reg_629_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_0_2_V_3_reg_629 <= knn_set_0_2_V_0_fu_88;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_0_2_V_3_reg_629 <= grp_update_knn_fu_734_ap_return_2;
            end if; 
        end if;
    end process;

    knn_set_1_0_V_3_reg_619_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_1_0_V_3_reg_619 <= knn_set_1_0_V_0_fu_92;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_1_0_V_3_reg_619 <= grp_update_knn_fu_752_ap_return_0;
            end if; 
        end if;
    end process;

    knn_set_1_1_V_3_reg_609_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_1_1_V_3_reg_609 <= knn_set_1_1_V_0_fu_96;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_1_1_V_3_reg_609 <= grp_update_knn_fu_752_ap_return_1;
            end if; 
        end if;
    end process;

    knn_set_1_2_V_3_reg_599_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_1_2_V_3_reg_599 <= knn_set_1_2_V_0_fu_100;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_1_2_V_3_reg_599 <= grp_update_knn_fu_752_ap_return_2;
            end if; 
        end if;
    end process;

    knn_set_2_0_V_3_reg_589_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_2_0_V_3_reg_589 <= knn_set_2_0_V_0_fu_104;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_2_0_V_3_reg_589 <= grp_update_knn_fu_770_ap_return_0;
            end if; 
        end if;
    end process;

    knn_set_2_1_V_3_reg_579_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_2_1_V_3_reg_579 <= knn_set_2_1_V_0_fu_108;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_2_1_V_3_reg_579 <= grp_update_knn_fu_770_ap_return_1;
            end if; 
        end if;
    end process;

    knn_set_2_2_V_3_reg_569_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_2_2_V_3_reg_569 <= knn_set_2_2_V_0_fu_112;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_2_2_V_3_reg_569 <= grp_update_knn_fu_770_ap_return_2;
            end if; 
        end if;
    end process;

    knn_set_3_0_V_3_reg_559_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_3_0_V_3_reg_559 <= knn_set_3_0_V_0_fu_116;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_3_0_V_3_reg_559 <= grp_update_knn_fu_788_ap_return_0;
            end if; 
        end if;
    end process;

    knn_set_3_1_V_3_reg_549_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_3_1_V_3_reg_549 <= knn_set_3_1_V_0_fu_120;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_3_1_V_3_reg_549 <= grp_update_knn_fu_788_ap_return_1;
            end if; 
        end if;
    end process;

    knn_set_3_2_V_3_reg_539_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_3_2_V_3_reg_539 <= knn_set_3_2_V_0_fu_124;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_3_2_V_3_reg_539 <= grp_update_knn_fu_788_ap_return_2;
            end if; 
        end if;
    end process;

    knn_set_4_0_V_3_reg_529_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_4_0_V_3_reg_529 <= knn_set_4_0_V_0_fu_128;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_4_0_V_3_reg_529 <= grp_update_knn_fu_806_ap_return_0;
            end if; 
        end if;
    end process;

    knn_set_4_1_V_3_reg_519_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_4_1_V_3_reg_519 <= knn_set_4_1_V_0_fu_132;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_4_1_V_3_reg_519 <= grp_update_knn_fu_806_ap_return_1;
            end if; 
        end if;
    end process;

    knn_set_4_2_V_3_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_4_2_V_3_reg_509 <= knn_set_4_2_V_0_fu_136;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_4_2_V_3_reg_509 <= grp_update_knn_fu_806_ap_return_2;
            end if; 
        end if;
    end process;

    knn_set_5_0_V_3_reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_5_0_V_3_reg_499 <= knn_set_5_0_V_0_fu_140;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_5_0_V_3_reg_499 <= grp_update_knn_fu_824_ap_return_0;
            end if; 
        end if;
    end process;

    knn_set_5_1_V_3_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_5_1_V_3_reg_489 <= knn_set_5_1_V_0_fu_144;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_5_1_V_3_reg_489 <= grp_update_knn_fu_824_ap_return_1;
            end if; 
        end if;
    end process;

    knn_set_5_2_V_3_reg_479_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_5_2_V_3_reg_479 <= knn_set_5_2_V_0_fu_148;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_5_2_V_3_reg_479 <= grp_update_knn_fu_824_ap_return_2;
            end if; 
        end if;
    end process;

    knn_set_6_0_V_3_reg_469_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_6_0_V_3_reg_469 <= knn_set_6_0_V_0_fu_152;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_6_0_V_3_reg_469 <= grp_update_knn_fu_842_ap_return_0;
            end if; 
        end if;
    end process;

    knn_set_6_1_V_3_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_6_1_V_3_reg_459 <= knn_set_6_1_V_0_fu_156;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_6_1_V_3_reg_459 <= grp_update_knn_fu_842_ap_return_1;
            end if; 
        end if;
    end process;

    knn_set_6_2_V_3_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_6_2_V_3_reg_449 <= knn_set_6_2_V_0_fu_160;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_6_2_V_3_reg_449 <= grp_update_knn_fu_842_ap_return_2;
            end if; 
        end if;
    end process;

    knn_set_7_0_V_3_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_7_0_V_3_reg_439 <= knn_set_7_0_V_0_fu_164;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_7_0_V_3_reg_439 <= grp_update_knn_fu_861_ap_return_0;
            end if; 
        end if;
    end process;

    knn_set_7_1_V_3_reg_429_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_7_1_V_3_reg_429 <= knn_set_7_1_V_0_fu_168;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_7_1_V_3_reg_429 <= grp_update_knn_fu_861_ap_return_1;
            end if; 
        end if;
    end process;

    knn_set_7_2_V_3_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_7_2_V_3_reg_419 <= knn_set_7_2_V_0_fu_172;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_7_2_V_3_reg_419 <= grp_update_knn_fu_861_ap_return_2;
            end if; 
        end if;
    end process;

    knn_set_8_0_V_3_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_8_0_V_3_reg_409 <= knn_set_8_0_V_0_fu_176;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_8_0_V_3_reg_409 <= grp_update_knn_fu_879_ap_return_0;
            end if; 
        end if;
    end process;

    knn_set_8_1_V_3_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_8_1_V_3_reg_399 <= knn_set_8_1_V_0_fu_180;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_8_1_V_3_reg_399 <= grp_update_knn_fu_879_ap_return_1;
            end if; 
        end if;
    end process;

    knn_set_8_2_V_3_reg_389_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_8_2_V_3_reg_389 <= knn_set_8_2_V_0_fu_184;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_8_2_V_3_reg_389 <= grp_update_knn_fu_879_ap_return_2;
            end if; 
        end if;
    end process;

    knn_set_9_0_V_3_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_9_0_V_3_reg_379 <= knn_set_9_0_V_0_fu_188;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_9_0_V_3_reg_379 <= grp_update_knn_fu_897_ap_return_0;
            end if; 
        end if;
    end process;

    knn_set_9_1_V_3_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_9_1_V_3_reg_369 <= knn_set_9_1_V_0_fu_192;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_9_1_V_3_reg_369 <= grp_update_knn_fu_897_ap_return_1;
            end if; 
        end if;
    end process;

    knn_set_9_2_V_3_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                knn_set_9_2_V_3_reg_359 <= knn_set_9_2_V_0_fu_196;
            elsif (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                knn_set_9_2_V_3_reg_359 <= grp_update_knn_fu_897_ap_return_2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_4_reg_2153 <= i_4_fu_1605_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_2137 <= i_fu_1011_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_reg_2145 <= k_fu_1023_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_336 = ap_const_lv4_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln52_fu_1017_p2 = ap_const_lv1_0))) then
                knn_set_0_0_V_0_fu_80 <= knn_set_0_0_V_4_fu_1485_p6;
                knn_set_0_1_V_0_fu_84 <= knn_set_0_1_V_4_fu_1499_p6;
                knn_set_0_2_V_0_fu_88 <= knn_set_0_2_V_4_fu_1513_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_336 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln52_fu_1017_p2 = ap_const_lv1_0))) then
                knn_set_1_0_V_0_fu_92 <= knn_set_1_0_V_4_fu_1428_p6;
                knn_set_1_1_V_0_fu_96 <= knn_set_1_1_V_4_fu_1442_p6;
                knn_set_1_2_V_0_fu_100 <= knn_set_1_2_V_4_fu_1456_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_336 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln52_fu_1017_p2 = ap_const_lv1_0))) then
                knn_set_2_0_V_0_fu_104 <= knn_set_2_0_V_4_fu_1371_p6;
                knn_set_2_1_V_0_fu_108 <= knn_set_2_1_V_4_fu_1385_p6;
                knn_set_2_2_V_0_fu_112 <= knn_set_2_2_V_4_fu_1399_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_336 = ap_const_lv4_3) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln52_fu_1017_p2 = ap_const_lv1_0))) then
                knn_set_3_0_V_0_fu_116 <= knn_set_3_0_V_4_fu_1314_p6;
                knn_set_3_1_V_0_fu_120 <= knn_set_3_1_V_4_fu_1328_p6;
                knn_set_3_2_V_0_fu_124 <= knn_set_3_2_V_4_fu_1342_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_336 = ap_const_lv4_4) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln52_fu_1017_p2 = ap_const_lv1_0))) then
                knn_set_4_0_V_0_fu_128 <= knn_set_4_0_V_4_fu_1257_p6;
                knn_set_4_1_V_0_fu_132 <= knn_set_4_1_V_4_fu_1271_p6;
                knn_set_4_2_V_0_fu_136 <= knn_set_4_2_V_4_fu_1285_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_336 = ap_const_lv4_5) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln52_fu_1017_p2 = ap_const_lv1_0))) then
                knn_set_5_0_V_0_fu_140 <= knn_set_5_0_V_4_fu_1200_p6;
                knn_set_5_1_V_0_fu_144 <= knn_set_5_1_V_4_fu_1214_p6;
                knn_set_5_2_V_0_fu_148 <= knn_set_5_2_V_4_fu_1228_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_336 = ap_const_lv4_6) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln52_fu_1017_p2 = ap_const_lv1_0))) then
                knn_set_6_0_V_0_fu_152 <= knn_set_6_0_V_4_fu_1143_p6;
                knn_set_6_1_V_0_fu_156 <= knn_set_6_1_V_4_fu_1157_p6;
                knn_set_6_2_V_0_fu_160 <= knn_set_6_2_V_4_fu_1171_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_336 = ap_const_lv4_7) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln52_fu_1017_p2 = ap_const_lv1_0))) then
                knn_set_7_0_V_0_fu_164 <= knn_set_7_0_V_4_fu_1086_p6;
                knn_set_7_1_V_0_fu_168 <= knn_set_7_1_V_4_fu_1100_p6;
                knn_set_7_2_V_0_fu_172 <= knn_set_7_2_V_4_fu_1114_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_336 = ap_const_lv4_8) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln52_fu_1017_p2 = ap_const_lv1_0))) then
                knn_set_8_0_V_0_fu_176 <= knn_set_8_0_V_4_fu_1029_p6;
                knn_set_8_1_V_0_fu_180 <= knn_set_8_1_V_4_fu_1043_p6;
                knn_set_8_2_V_0_fu_184 <= knn_set_8_2_V_4_fu_1057_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_0_reg_336 = ap_const_lv4_8)) and not((i_0_reg_336 = ap_const_lv4_7)) and not((i_0_reg_336 = ap_const_lv4_6)) and not((i_0_reg_336 = ap_const_lv4_5)) and not((i_0_reg_336 = ap_const_lv4_4)) and not((i_0_reg_336 = ap_const_lv4_3)) and not((i_0_reg_336 = ap_const_lv4_2)) and not((i_0_reg_336 = ap_const_lv4_1)) and not((i_0_reg_336 = ap_const_lv4_0)) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln52_fu_1017_p2 = ap_const_lv1_0))) then
                knn_set_9_0_V_0_fu_188 <= knn_set_9_0_V_4_fu_1542_p6;
                knn_set_9_1_V_0_fu_192 <= knn_set_9_1_V_4_fu_1556_p6;
                knn_set_9_2_V_0_fu_196 <= knn_set_9_2_V_4_fu_1570_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                training_data_V_6_lo_reg_2238 <= training_data_V_6_q0;
                    zext_ln63_1_reg_2213(45 downto 0) <= zext_ln63_1_fu_1630_p1(45 downto 0);
                    zext_ln63_2_reg_2218(46 downto 0) <= zext_ln63_2_fu_1635_p1(46 downto 0);
                    zext_ln63_3_reg_2223(46 downto 0) <= zext_ln63_3_fu_1640_p1(46 downto 0);
                    zext_ln63_4_reg_2228(45 downto 0) <= zext_ln63_4_fu_1645_p1(45 downto 0);
                    zext_ln63_5_reg_2233(44 downto 0) <= zext_ln63_5_fu_1650_p1(44 downto 0);
                    zext_ln63_6_reg_2243(41 downto 0) <= zext_ln63_6_fu_1655_p1(41 downto 0);
                    zext_ln63_7_reg_2248(44 downto 0) <= zext_ln63_7_fu_1660_p1(44 downto 0);
                    zext_ln63_8_reg_2253(40 downto 0) <= zext_ln63_8_fu_1665_p1(40 downto 0);
                    zext_ln63_reg_2208(45 downto 0) <= zext_ln63_fu_1625_p1(45 downto 0);
            end if;
        end if;
    end process;
    zext_ln63_reg_2208(47 downto 46) <= "00";
    zext_ln63_1_reg_2213(47 downto 46) <= "00";
    zext_ln63_2_reg_2218(47) <= '0';
    zext_ln63_3_reg_2223(47) <= '0';
    zext_ln63_4_reg_2228(47 downto 46) <= "00";
    zext_ln63_5_reg_2233(47 downto 45) <= "000";
    zext_ln63_6_reg_2243(47 downto 42) <= "000000";
    zext_ln63_7_reg_2248(47 downto 45) <= "000";
    zext_ln63_8_reg_2253(47 downto 41) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln57_fu_1599_p2, ap_CS_fsm_state7, ap_block_state7_on_subcall_done, grp_knn_vote_fu_670_ap_done, icmp_ln52_fu_1017_p2, icmp_ln51_fu_1005_p2, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln51_fu_1005_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln52_fu_1017_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln57_fu_1599_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((grp_knn_vote_fu_670_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state7_on_subcall_done_assign_proc : process(grp_update_knn_fu_734_ap_done, grp_update_knn_fu_752_ap_done, grp_update_knn_fu_770_ap_done, grp_update_knn_fu_788_ap_done, grp_update_knn_fu_806_ap_done, grp_update_knn_fu_824_ap_done, grp_update_knn_fu_842_ap_done, grp_update_knn_fu_861_ap_done, grp_update_knn_fu_879_ap_done, grp_update_knn_fu_897_ap_done)
    begin
                ap_block_state7_on_subcall_done <= ((grp_update_knn_fu_897_ap_done = ap_const_logic_0) or (grp_update_knn_fu_879_ap_done = ap_const_logic_0) or (grp_update_knn_fu_861_ap_done = ap_const_logic_0) or (grp_update_knn_fu_842_ap_done = ap_const_logic_0) or (grp_update_knn_fu_824_ap_done = ap_const_logic_0) or (grp_update_knn_fu_806_ap_done = ap_const_logic_0) or (grp_update_knn_fu_788_ap_done = ap_const_logic_0) or (grp_update_knn_fu_770_ap_done = ap_const_logic_0) or (grp_update_knn_fu_752_ap_done = ap_const_logic_0) or (grp_update_knn_fu_734_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_knn_vote_fu_670_ap_done, ap_CS_fsm_state8)
    begin
        if ((((grp_knn_vote_fu_670_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_knn_vote_fu_670_ap_done, ap_CS_fsm_state8)
    begin
        if (((grp_knn_vote_fu_670_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_knn_vote_fu_670_ap_done, grp_knn_vote_fu_670_ap_return, ap_CS_fsm_state8, ap_return_preg)
    begin
        if (((grp_knn_vote_fu_670_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_return <= grp_knn_vote_fu_670_ap_return;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    grp_knn_vote_fu_670_ap_start <= grp_knn_vote_fu_670_ap_start_reg;
    grp_update_knn_fu_734_ap_start <= grp_update_knn_fu_734_ap_start_reg;
    grp_update_knn_fu_752_ap_start <= grp_update_knn_fu_752_ap_start_reg;
    grp_update_knn_fu_770_ap_start <= grp_update_knn_fu_770_ap_start_reg;
    grp_update_knn_fu_788_ap_start <= grp_update_knn_fu_788_ap_start_reg;
    grp_update_knn_fu_806_ap_start <= grp_update_knn_fu_806_ap_start_reg;
    grp_update_knn_fu_824_ap_start <= grp_update_knn_fu_824_ap_start_reg;
    grp_update_knn_fu_842_ap_start <= grp_update_knn_fu_842_ap_start_reg;
    grp_update_knn_fu_861_ap_start <= grp_update_knn_fu_861_ap_start_reg;
    grp_update_knn_fu_879_ap_start <= grp_update_knn_fu_879_ap_start_reg;
    grp_update_knn_fu_897_ap_start <= grp_update_knn_fu_897_ap_start_reg;
    i_4_fu_1605_p2 <= std_logic_vector(unsigned(i4_0_reg_659) + unsigned(ap_const_lv11_1));
    i_fu_1011_p2 <= std_logic_vector(unsigned(i_0_reg_336) + unsigned(ap_const_lv4_1));
    icmp_ln51_fu_1005_p2 <= "1" when (i_0_reg_336 = ap_const_lv4_A) else "0";
    icmp_ln52_fu_1017_p2 <= "1" when (k_0_reg_348 = ap_const_lv2_3) else "0";
    icmp_ln57_fu_1599_p2 <= "1" when (i4_0_reg_659 = ap_const_lv11_708) else "0";
    k_fu_1023_p2 <= std_logic_vector(unsigned(k_0_reg_348) + unsigned(ap_const_lv2_1));
    training_data_V_0_address0 <= zext_ln61_fu_1611_p1(11 - 1 downto 0);

    training_data_V_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            training_data_V_0_ce0 <= ap_const_logic_1;
        else 
            training_data_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_data_V_1_address0 <= zext_ln61_fu_1611_p1(11 - 1 downto 0);

    training_data_V_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            training_data_V_1_ce0 <= ap_const_logic_1;
        else 
            training_data_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_data_V_2_address0 <= zext_ln61_fu_1611_p1(11 - 1 downto 0);

    training_data_V_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            training_data_V_2_ce0 <= ap_const_logic_1;
        else 
            training_data_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_data_V_3_address0 <= zext_ln61_fu_1611_p1(11 - 1 downto 0);

    training_data_V_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            training_data_V_3_ce0 <= ap_const_logic_1;
        else 
            training_data_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_data_V_4_address0 <= zext_ln61_fu_1611_p1(11 - 1 downto 0);

    training_data_V_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            training_data_V_4_ce0 <= ap_const_logic_1;
        else 
            training_data_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_data_V_5_address0 <= zext_ln61_fu_1611_p1(11 - 1 downto 0);

    training_data_V_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            training_data_V_5_ce0 <= ap_const_logic_1;
        else 
            training_data_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_data_V_6_address0 <= zext_ln61_fu_1611_p1(11 - 1 downto 0);

    training_data_V_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            training_data_V_6_ce0 <= ap_const_logic_1;
        else 
            training_data_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_data_V_7_address0 <= zext_ln61_fu_1611_p1(11 - 1 downto 0);

    training_data_V_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            training_data_V_7_ce0 <= ap_const_logic_1;
        else 
            training_data_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_data_V_8_address0 <= zext_ln61_fu_1611_p1(11 - 1 downto 0);

    training_data_V_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            training_data_V_8_ce0 <= ap_const_logic_1;
        else 
            training_data_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_data_V_9_address0 <= zext_ln61_fu_1611_p1(11 - 1 downto 0);

    training_data_V_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            training_data_V_9_ce0 <= ap_const_logic_1;
        else 
            training_data_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln61_fu_1611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_reg_659),64));
    zext_ln63_1_fu_1630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(training_data_V_1_q0),48));
    zext_ln63_2_fu_1635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(training_data_V_2_q0),48));
    zext_ln63_3_fu_1640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(training_data_V_3_q0),48));
    zext_ln63_4_fu_1645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(training_data_V_4_q0),48));
    zext_ln63_5_fu_1650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(training_data_V_5_q0),48));
    zext_ln63_6_fu_1655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(training_data_V_7_q0),48));
    zext_ln63_7_fu_1660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(training_data_V_8_q0),48));
    zext_ln63_8_fu_1665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(training_data_V_9_q0),48));
    zext_ln63_fu_1625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(training_data_V_0_q0),48));
end behav;
