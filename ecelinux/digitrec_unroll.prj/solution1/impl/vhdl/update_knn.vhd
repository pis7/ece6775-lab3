-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity update_knn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    test_inst_V : IN STD_LOGIC_VECTOR (48 downto 0);
    train_inst_V : IN STD_LOGIC_VECTOR (47 downto 0);
    min_distances_0_V_r_2 : IN STD_LOGIC_VECTOR (5 downto 0);
    min_distances_0_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
    min_distances_1_V_r_2 : IN STD_LOGIC_VECTOR (5 downto 0);
    min_distances_1_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
    min_distances_2_V_r_2 : IN STD_LOGIC_VECTOR (5 downto 0);
    min_distances_2_V_r : IN STD_LOGIC_VECTOR (5 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of update_knn is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ret_V_fu_182_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal ret_V_reg_417 : STD_LOGIC_VECTOR (48 downto 0);
    signal i_fu_198_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal dist_V_fu_215_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln89_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln96_fu_262_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln95_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_270_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal min_distances_0_V_0_reg_106 : STD_LOGIC_VECTOR (5 downto 0);
    signal bvh_d_index_reg_118 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_032_0_reg_129 : STD_LOGIC_VECTOR (3 downto 0);
    signal val_assign_reg_140 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln100_1_fu_345_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_phi_ln101_phi_fu_154_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln895_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln100_2_fu_353_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_phi_ln101_1_phi_fu_163_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln100_fu_337_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_phi_ln101_2_phi_fu_172_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal train_inst_V_cast_fu_178_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln89_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_204_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln700_fu_211_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln895_2_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_243_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln895_fu_233_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_243_p5 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln895_1_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_idx_V_fu_258_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln895_fu_276_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_280_p5 : STD_LOGIC_VECTOR (5 downto 0);
    signal write_flag_1_fu_295_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag4_1_fu_323_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag7_1_fu_309_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component dut_mux_32_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component dut_mux_42_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    dut_mux_32_6_1_1_U1 : component dut_mux_32_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => min_distances_0_V_r,
        din1 => min_distances_1_V_r,
        din2 => min_distances_2_V_r,
        din3 => tmp_1_fu_243_p4,
        dout => tmp_1_fu_243_p5);

    dut_mux_32_6_1_1_U2 : component dut_mux_32_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => min_distances_0_V_r,
        din1 => min_distances_1_V_r,
        din2 => min_distances_2_V_r,
        din3 => trunc_ln895_fu_276_p1,
        dout => tmp_fu_280_p5);

    dut_mux_42_1_1_1_U3 : component dut_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_0,
        din4 => trunc_ln895_fu_276_p1,
        dout => write_flag_1_fu_295_p6);

    dut_mux_42_1_1_1_U4 : component dut_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_1,
        din4 => trunc_ln895_fu_276_p1,
        dout => write_flag7_1_fu_309_p6);

    dut_mux_42_1_1_1_U5 : component dut_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_0,
        din4 => trunc_ln895_fu_276_p1,
        dout => write_flag4_1_fu_323_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv6_0;
            else
                if (((icmp_ln95_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_0_preg <= ap_phi_mux_phi_ln101_2_phi_fu_172_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv6_0;
            else
                if (((icmp_ln95_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_1_preg <= ap_phi_mux_phi_ln101_phi_fu_154_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv6_0;
            else
                if (((icmp_ln95_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_2_preg <= ap_phi_mux_phi_ln101_1_phi_fu_163_p4;
                end if; 
            end if;
        end if;
    end process;


    bvh_d_index_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                bvh_d_index_reg_118 <= i_fu_198_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                bvh_d_index_reg_118 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    min_distances_0_V_0_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                min_distances_0_V_0_reg_106 <= dist_V_fu_215_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                min_distances_0_V_0_reg_106 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_032_0_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_032_0_reg_129 <= ap_const_lv4_0;
            elsif (((icmp_ln95_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_032_0_reg_129 <= select_ln96_fu_262_p3;
            end if; 
        end if;
    end process;

    val_assign_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                val_assign_reg_140 <= ap_const_lv2_1;
            elsif (((icmp_ln95_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                val_assign_reg_140 <= i_1_fu_270_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ret_V_reg_417 <= ret_V_fu_182_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln89_fu_192_p2, ap_CS_fsm_state3, icmp_ln95_fu_221_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln89_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln95_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln95_fu_221_p2)
    begin
        if ((((icmp_ln95_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_phi_ln101_1_phi_fu_163_p4_assign_proc : process(min_distances_2_V_r_2, ap_CS_fsm_state3, icmp_ln95_fu_221_p2, icmp_ln895_fu_289_p2, select_ln100_2_fu_353_p3)
    begin
        if (((icmp_ln95_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
            if ((icmp_ln895_fu_289_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_phi_ln101_1_phi_fu_163_p4 <= min_distances_2_V_r_2;
            elsif ((icmp_ln895_fu_289_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_phi_ln101_1_phi_fu_163_p4 <= select_ln100_2_fu_353_p3;
            else 
                ap_phi_mux_phi_ln101_1_phi_fu_163_p4 <= "XXXXXX";
            end if;
        else 
            ap_phi_mux_phi_ln101_1_phi_fu_163_p4 <= "XXXXXX";
        end if; 
    end process;


    ap_phi_mux_phi_ln101_2_phi_fu_172_p4_assign_proc : process(min_distances_0_V_r_2, ap_CS_fsm_state3, icmp_ln95_fu_221_p2, icmp_ln895_fu_289_p2, select_ln100_fu_337_p3)
    begin
        if (((icmp_ln95_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
            if ((icmp_ln895_fu_289_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_phi_ln101_2_phi_fu_172_p4 <= min_distances_0_V_r_2;
            elsif ((icmp_ln895_fu_289_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_phi_ln101_2_phi_fu_172_p4 <= select_ln100_fu_337_p3;
            else 
                ap_phi_mux_phi_ln101_2_phi_fu_172_p4 <= "XXXXXX";
            end if;
        else 
            ap_phi_mux_phi_ln101_2_phi_fu_172_p4 <= "XXXXXX";
        end if; 
    end process;


    ap_phi_mux_phi_ln101_phi_fu_154_p4_assign_proc : process(min_distances_1_V_r_2, ap_CS_fsm_state3, icmp_ln95_fu_221_p2, select_ln100_1_fu_345_p3, icmp_ln895_fu_289_p2)
    begin
        if (((icmp_ln95_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
            if ((icmp_ln895_fu_289_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_phi_ln101_phi_fu_154_p4 <= min_distances_1_V_r_2;
            elsif ((icmp_ln895_fu_289_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_phi_ln101_phi_fu_154_p4 <= select_ln100_1_fu_345_p3;
            else 
                ap_phi_mux_phi_ln101_phi_fu_154_p4 <= "XXXXXX";
            end if;
        else 
            ap_phi_mux_phi_ln101_phi_fu_154_p4 <= "XXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln95_fu_221_p2)
    begin
        if (((icmp_ln95_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state3, icmp_ln95_fu_221_p2, ap_phi_mux_phi_ln101_2_phi_fu_172_p4, ap_return_0_preg)
    begin
        if (((icmp_ln95_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_0 <= ap_phi_mux_phi_ln101_2_phi_fu_172_p4;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state3, icmp_ln95_fu_221_p2, ap_phi_mux_phi_ln101_phi_fu_154_p4, ap_return_1_preg)
    begin
        if (((icmp_ln95_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_1 <= ap_phi_mux_phi_ln101_phi_fu_154_p4;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state3, icmp_ln95_fu_221_p2, ap_phi_mux_phi_ln101_1_phi_fu_163_p4, ap_return_2_preg)
    begin
        if (((icmp_ln95_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_2 <= ap_phi_mux_phi_ln101_1_phi_fu_163_p4;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;

    dist_V_fu_215_p2 <= std_logic_vector(unsigned(zext_ln700_fu_211_p1) + unsigned(min_distances_0_V_0_reg_106));
    i_1_fu_270_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(val_assign_reg_140));
    i_fu_198_p2 <= std_logic_vector(unsigned(bvh_d_index_reg_118) + unsigned(ap_const_lv6_1));
    icmp_ln895_1_fu_252_p2 <= "1" when (unsigned(select_ln895_fu_233_p3) > unsigned(tmp_1_fu_243_p5)) else "0";
    icmp_ln895_2_fu_227_p2 <= "1" when (val_assign_reg_140 = ap_const_lv2_1) else "0";
    icmp_ln895_fu_289_p2 <= "1" when (unsigned(tmp_fu_280_p5) > unsigned(min_distances_0_V_0_reg_106)) else "0";
    icmp_ln89_fu_192_p2 <= "1" when (bvh_d_index_reg_118 = ap_const_lv6_31) else "0";
    icmp_ln95_fu_221_p2 <= "1" when (val_assign_reg_140 = ap_const_lv2_3) else "0";
    max_idx_V_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_reg_140),4));
    p_Result_s_fu_204_p3 <= ret_V_reg_417(to_integer(unsigned(zext_ln89_fu_188_p1)) downto to_integer(unsigned(zext_ln89_fu_188_p1))) when (to_integer(unsigned(zext_ln89_fu_188_p1))>= 0 and to_integer(unsigned(zext_ln89_fu_188_p1))<=48) else "-";
    ret_V_fu_182_p2 <= (train_inst_V_cast_fu_178_p1 xor test_inst_V);
    select_ln100_1_fu_345_p3 <= 
        min_distances_0_V_0_reg_106 when (write_flag4_1_fu_323_p6(0) = '1') else 
        min_distances_1_V_r_2;
    select_ln100_2_fu_353_p3 <= 
        min_distances_0_V_0_reg_106 when (write_flag7_1_fu_309_p6(0) = '1') else 
        min_distances_2_V_r_2;
    select_ln100_fu_337_p3 <= 
        min_distances_0_V_0_reg_106 when (write_flag_1_fu_295_p6(0) = '1') else 
        min_distances_0_V_r_2;
    select_ln895_fu_233_p3 <= 
        min_distances_1_V_r when (icmp_ln895_2_fu_227_p2(0) = '1') else 
        min_distances_2_V_r;
    select_ln96_fu_262_p3 <= 
        max_idx_V_fu_258_p1 when (icmp_ln895_1_fu_252_p2(0) = '1') else 
        p_032_0_reg_129;
    tmp_1_fu_243_p4 <= p_032_0_reg_129(2 - 1 downto 0);
    train_inst_V_cast_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(train_inst_V),49));
    trunc_ln895_fu_276_p1 <= p_032_0_reg_129(2 - 1 downto 0);
    zext_ln700_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_204_p3),6));
    zext_ln89_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bvh_d_index_reg_118),32));
end behav;
