// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _update_knn_HH_
#define _update_knn_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "dut_mux_32_6_1_1.h"
#include "dut_mux_42_1_1_1.h"

namespace ap_rtl {

struct update_knn : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<49> > test_inst_V;
    sc_in< sc_lv<48> > train_inst_V;
    sc_in< sc_lv<6> > min_distances_0_V_r_2;
    sc_in< sc_lv<6> > min_distances_0_V_r;
    sc_in< sc_lv<6> > min_distances_1_V_r_2;
    sc_in< sc_lv<6> > min_distances_1_V_r;
    sc_in< sc_lv<6> > min_distances_2_V_r_2;
    sc_in< sc_lv<6> > min_distances_2_V_r;
    sc_out< sc_lv<6> > ap_return_0;
    sc_out< sc_lv<6> > ap_return_1;
    sc_out< sc_lv<6> > ap_return_2;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<1> > ap_var_for_const0;


    // Module declarations
    update_knn(sc_module_name name);
    SC_HAS_PROCESS(update_knn);

    ~update_knn();

    sc_trace_file* mVcdFile;

    dut_mux_32_6_1_1<1,1,6,6,6,2,6>* dut_mux_32_6_1_1_U1;
    dut_mux_32_6_1_1<1,1,6,6,6,2,6>* dut_mux_32_6_1_1_U2;
    dut_mux_42_1_1_1<1,1,1,1,1,1,2,1>* dut_mux_42_1_1_1_U3;
    dut_mux_42_1_1_1<1,1,1,1,1,1,2,1>* dut_mux_42_1_1_1_U4;
    dut_mux_42_1_1_1<1,1,1,1,1,1,2,1>* dut_mux_42_1_1_1_U5;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<49> > ret_V_fu_182_p2;
    sc_signal< sc_lv<49> > ret_V_reg_417;
    sc_signal< sc_lv<6> > i_fu_198_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > dist_V_fu_215_p2;
    sc_signal< sc_lv<1> > icmp_ln89_fu_192_p2;
    sc_signal< sc_lv<4> > select_ln96_fu_262_p3;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln95_fu_221_p2;
    sc_signal< sc_lv<2> > i_1_fu_270_p2;
    sc_signal< sc_lv<6> > min_distances_0_V_0_reg_106;
    sc_signal< sc_lv<6> > bvh_d_index_reg_118;
    sc_signal< sc_lv<4> > p_032_0_reg_129;
    sc_signal< sc_lv<2> > val_assign_reg_140;
    sc_signal< sc_lv<6> > select_ln100_1_fu_345_p3;
    sc_signal< sc_lv<6> > ap_phi_mux_phi_ln101_phi_fu_154_p4;
    sc_signal< sc_lv<1> > icmp_ln895_fu_289_p2;
    sc_signal< sc_lv<6> > select_ln100_2_fu_353_p3;
    sc_signal< sc_lv<6> > ap_phi_mux_phi_ln101_1_phi_fu_163_p4;
    sc_signal< sc_lv<6> > select_ln100_fu_337_p3;
    sc_signal< sc_lv<6> > ap_phi_mux_phi_ln101_2_phi_fu_172_p4;
    sc_signal< sc_lv<49> > train_inst_V_cast_fu_178_p1;
    sc_signal< sc_lv<32> > zext_ln89_fu_188_p1;
    sc_signal< sc_lv<1> > p_Result_s_fu_204_p3;
    sc_signal< sc_lv<6> > zext_ln700_fu_211_p1;
    sc_signal< sc_lv<1> > icmp_ln895_2_fu_227_p2;
    sc_signal< sc_lv<2> > tmp_1_fu_243_p4;
    sc_signal< sc_lv<6> > select_ln895_fu_233_p3;
    sc_signal< sc_lv<6> > tmp_1_fu_243_p5;
    sc_signal< sc_lv<1> > icmp_ln895_1_fu_252_p2;
    sc_signal< sc_lv<4> > max_idx_V_fu_258_p1;
    sc_signal< sc_lv<2> > trunc_ln895_fu_276_p1;
    sc_signal< sc_lv<6> > tmp_fu_280_p5;
    sc_signal< sc_lv<1> > write_flag_1_fu_295_p6;
    sc_signal< sc_lv<1> > write_flag4_1_fu_323_p6;
    sc_signal< sc_lv<1> > write_flag7_1_fu_309_p6;
    sc_signal< sc_lv<6> > ap_return_0_preg;
    sc_signal< sc_lv<6> > ap_return_1_preg;
    sc_signal< sc_lv<6> > ap_return_2_preg;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<6> ap_const_lv6_31;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<2> ap_const_lv2_3;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_phi_ln101_1_phi_fu_163_p4();
    void thread_ap_phi_mux_phi_ln101_2_phi_fu_172_p4();
    void thread_ap_phi_mux_phi_ln101_phi_fu_154_p4();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_dist_V_fu_215_p2();
    void thread_i_1_fu_270_p2();
    void thread_i_fu_198_p2();
    void thread_icmp_ln895_1_fu_252_p2();
    void thread_icmp_ln895_2_fu_227_p2();
    void thread_icmp_ln895_fu_289_p2();
    void thread_icmp_ln89_fu_192_p2();
    void thread_icmp_ln95_fu_221_p2();
    void thread_max_idx_V_fu_258_p1();
    void thread_p_Result_s_fu_204_p3();
    void thread_ret_V_fu_182_p2();
    void thread_select_ln100_1_fu_345_p3();
    void thread_select_ln100_2_fu_353_p3();
    void thread_select_ln100_fu_337_p3();
    void thread_select_ln895_fu_233_p3();
    void thread_select_ln96_fu_262_p3();
    void thread_tmp_1_fu_243_p4();
    void thread_train_inst_V_cast_fu_178_p1();
    void thread_trunc_ln895_fu_276_p1();
    void thread_zext_ln700_fu_211_p1();
    void thread_zext_ln89_fu_188_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
