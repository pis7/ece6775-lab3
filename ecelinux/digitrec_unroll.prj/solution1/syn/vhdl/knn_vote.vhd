-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity knn_vote is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    knn_set_0_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_0_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_0_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_1_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_1_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_1_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_2_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_2_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_2_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_3_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_3_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_3_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_4_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_4_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_4_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_5_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_5_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_5_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_6_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_6_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_6_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_7_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_7_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_7_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_8_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_8_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_8_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_9_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_9_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    knn_set_9_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of knn_vote is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_544_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln169_fu_565_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln169_reg_1040 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_3_fu_575_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_reg_1048 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln169_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sorted_labels_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sorted_labels_load_1_reg_1058 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln171_fu_586_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln171_reg_1063 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_1069 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln171_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal freqs_0_V_4_fu_659_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal freqs_0_V_5_fu_675_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal freqs_0_V_6_fu_683_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln879_fu_752_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal select_ln879_1_fu_760_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln879_2_fu_768_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal local_cnt_V_1_fu_776_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln183_fu_830_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln182_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_838_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sorted_distances_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sorted_distances_q1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sorted_labels_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sorted_labels_ce0 : STD_LOGIC;
    signal sorted_labels_we0 : STD_LOGIC;
    signal sorted_labels_ce1 : STD_LOGIC;
    signal sorted_labels_we1 : STD_LOGIC;
    signal sorted_labels_q1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sort_knn_fu_461_ap_start : STD_LOGIC;
    signal grp_sort_knn_fu_461_ap_done : STD_LOGIC;
    signal grp_sort_knn_fu_461_ap_idle : STD_LOGIC;
    signal grp_sort_knn_fu_461_ap_ready : STD_LOGIC;
    signal grp_sort_knn_fu_461_sorted_distances_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sort_knn_fu_461_sorted_distances_V_ce0 : STD_LOGIC;
    signal grp_sort_knn_fu_461_sorted_distances_V_we0 : STD_LOGIC;
    signal grp_sort_knn_fu_461_sorted_distances_V_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sort_knn_fu_461_sorted_distances_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sort_knn_fu_461_sorted_distances_V_ce1 : STD_LOGIC;
    signal grp_sort_knn_fu_461_sorted_distances_V_we1 : STD_LOGIC;
    signal grp_sort_knn_fu_461_sorted_distances_V_d1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sort_knn_fu_461_sorted_labels_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sort_knn_fu_461_sorted_labels_V_ce0 : STD_LOGIC;
    signal grp_sort_knn_fu_461_sorted_labels_V_we0 : STD_LOGIC;
    signal grp_sort_knn_fu_461_sorted_labels_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sort_knn_fu_461_sorted_labels_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sort_knn_fu_461_sorted_labels_V_ce1 : STD_LOGIC;
    signal grp_sort_knn_fu_461_sorted_labels_V_we1 : STD_LOGIC;
    signal grp_sort_knn_fu_461_sorted_labels_V_d1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_i_0_phi_fu_336_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_0_reg_332 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln164_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal freqs_2_V_2_reg_343 : STD_LOGIC_VECTOR (3 downto 0);
    signal freqs_1_V_2_reg_353 : STD_LOGIC_VECTOR (3 downto 0);
    signal freqs_0_V_2_reg_363 : STD_LOGIC_VECTOR (3 downto 0);
    signal i3_0_reg_373 : STD_LOGIC_VECTOR (1 downto 0);
    signal freqs_2_V_3_reg_385 : STD_LOGIC_VECTOR (3 downto 0);
    signal freqs_1_V_3_reg_396 : STD_LOGIC_VECTOR (3 downto 0);
    signal freqs_0_V_reg_407 : STD_LOGIC_VECTOR (3 downto 0);
    signal t_V_reg_418 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_in_reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_022_0_reg_439 : STD_LOGIC_VECTOR (3 downto 0);
    signal val_assign_reg_450 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sort_knn_fu_461_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln172_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln172_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_844_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal freqs_0_V_0_fu_106 : STD_LOGIC_VECTOR (3 downto 0);
    signal freqs_1_V_0_fu_110 : STD_LOGIC_VECTOR (3 downto 0);
    signal freqs_2_V_0_fu_114 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_607_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln321_1_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln321_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln883_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln883_fu_651_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln883_2_fu_667_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal freqs_0_V_3_fu_637_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln321_2_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln321_3_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln321_fu_707_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln321_2_fu_728_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln879_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln321_1_fu_720_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln321_3_fu_736_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln321_4_fu_744_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal local_cnt_V_fu_696_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_2_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_808_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln895_fu_796_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_808_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_idx_V_fu_826_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component sort_knn IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        knn_set_0_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_0_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_0_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_1_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_1_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_1_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_2_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_2_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_2_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_3_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_3_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_3_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_4_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_4_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_4_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_5_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_5_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_5_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_6_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_6_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_6_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_7_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_7_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_7_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_8_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_8_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_8_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_9_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_9_1_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        knn_set_9_2_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        sorted_distances_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sorted_distances_V_ce0 : OUT STD_LOGIC;
        sorted_distances_V_we0 : OUT STD_LOGIC;
        sorted_distances_V_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sorted_distances_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
        sorted_distances_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sorted_distances_V_ce1 : OUT STD_LOGIC;
        sorted_distances_V_we1 : OUT STD_LOGIC;
        sorted_distances_V_d1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sorted_distances_V_q1 : IN STD_LOGIC_VECTOR (5 downto 0);
        sorted_labels_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sorted_labels_V_ce0 : OUT STD_LOGIC;
        sorted_labels_V_we0 : OUT STD_LOGIC;
        sorted_labels_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        sorted_labels_V_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
        sorted_labels_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sorted_labels_V_ce1 : OUT STD_LOGIC;
        sorted_labels_V_we1 : OUT STD_LOGIC;
        sorted_labels_V_d1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        sorted_labels_V_q1 : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component dut_mux_32_4_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component knn_vote_sorted_dbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (5 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component knn_vote_sorted_lcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (3 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    sorted_distances_U : component knn_vote_sorted_dbkb
    generic map (
        DataWidth => 6,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_sort_knn_fu_461_sorted_distances_V_address0,
        ce0 => grp_sort_knn_fu_461_sorted_distances_V_ce0,
        we0 => grp_sort_knn_fu_461_sorted_distances_V_we0,
        d0 => grp_sort_knn_fu_461_sorted_distances_V_d0,
        q0 => sorted_distances_q0,
        address1 => grp_sort_knn_fu_461_sorted_distances_V_address1,
        ce1 => grp_sort_knn_fu_461_sorted_distances_V_ce1,
        we1 => grp_sort_knn_fu_461_sorted_distances_V_we1,
        d1 => grp_sort_knn_fu_461_sorted_distances_V_d1,
        q1 => sorted_distances_q1);

    sorted_labels_U : component knn_vote_sorted_lcud
    generic map (
        DataWidth => 4,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sorted_labels_address0,
        ce0 => sorted_labels_ce0,
        we0 => sorted_labels_we0,
        d0 => grp_sort_knn_fu_461_sorted_labels_V_d0,
        q0 => sorted_labels_q0,
        address1 => grp_sort_knn_fu_461_sorted_labels_V_address1,
        ce1 => sorted_labels_ce1,
        we1 => sorted_labels_we1,
        d1 => grp_sort_knn_fu_461_sorted_labels_V_d1,
        q1 => sorted_labels_q1);

    grp_sort_knn_fu_461 : component sort_knn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sort_knn_fu_461_ap_start,
        ap_done => grp_sort_knn_fu_461_ap_done,
        ap_idle => grp_sort_knn_fu_461_ap_idle,
        ap_ready => grp_sort_knn_fu_461_ap_ready,
        knn_set_0_0_V_read => knn_set_0_0_V_read,
        knn_set_0_1_V_read => knn_set_0_1_V_read,
        knn_set_0_2_V_read => knn_set_0_2_V_read,
        knn_set_1_0_V_read => knn_set_1_0_V_read,
        knn_set_1_1_V_read => knn_set_1_1_V_read,
        knn_set_1_2_V_read => knn_set_1_2_V_read,
        knn_set_2_0_V_read => knn_set_2_0_V_read,
        knn_set_2_1_V_read => knn_set_2_1_V_read,
        knn_set_2_2_V_read => knn_set_2_2_V_read,
        knn_set_3_0_V_read => knn_set_3_0_V_read,
        knn_set_3_1_V_read => knn_set_3_1_V_read,
        knn_set_3_2_V_read => knn_set_3_2_V_read,
        knn_set_4_0_V_read => knn_set_4_0_V_read,
        knn_set_4_1_V_read => knn_set_4_1_V_read,
        knn_set_4_2_V_read => knn_set_4_2_V_read,
        knn_set_5_0_V_read => knn_set_5_0_V_read,
        knn_set_5_1_V_read => knn_set_5_1_V_read,
        knn_set_5_2_V_read => knn_set_5_2_V_read,
        knn_set_6_0_V_read => knn_set_6_0_V_read,
        knn_set_6_1_V_read => knn_set_6_1_V_read,
        knn_set_6_2_V_read => knn_set_6_2_V_read,
        knn_set_7_0_V_read => knn_set_7_0_V_read,
        knn_set_7_1_V_read => knn_set_7_1_V_read,
        knn_set_7_2_V_read => knn_set_7_2_V_read,
        knn_set_8_0_V_read => knn_set_8_0_V_read,
        knn_set_8_1_V_read => knn_set_8_1_V_read,
        knn_set_8_2_V_read => knn_set_8_2_V_read,
        knn_set_9_0_V_read => knn_set_9_0_V_read,
        knn_set_9_1_V_read => knn_set_9_1_V_read,
        knn_set_9_2_V_read => knn_set_9_2_V_read,
        sorted_distances_V_address0 => grp_sort_knn_fu_461_sorted_distances_V_address0,
        sorted_distances_V_ce0 => grp_sort_knn_fu_461_sorted_distances_V_ce0,
        sorted_distances_V_we0 => grp_sort_knn_fu_461_sorted_distances_V_we0,
        sorted_distances_V_d0 => grp_sort_knn_fu_461_sorted_distances_V_d0,
        sorted_distances_V_q0 => sorted_distances_q0,
        sorted_distances_V_address1 => grp_sort_knn_fu_461_sorted_distances_V_address1,
        sorted_distances_V_ce1 => grp_sort_knn_fu_461_sorted_distances_V_ce1,
        sorted_distances_V_we1 => grp_sort_knn_fu_461_sorted_distances_V_we1,
        sorted_distances_V_d1 => grp_sort_knn_fu_461_sorted_distances_V_d1,
        sorted_distances_V_q1 => sorted_distances_q1,
        sorted_labels_V_address0 => grp_sort_knn_fu_461_sorted_labels_V_address0,
        sorted_labels_V_ce0 => grp_sort_knn_fu_461_sorted_labels_V_ce0,
        sorted_labels_V_we0 => grp_sort_knn_fu_461_sorted_labels_V_we0,
        sorted_labels_V_d0 => grp_sort_knn_fu_461_sorted_labels_V_d0,
        sorted_labels_V_q0 => sorted_labels_q0,
        sorted_labels_V_address1 => grp_sort_knn_fu_461_sorted_labels_V_address1,
        sorted_labels_V_ce1 => grp_sort_knn_fu_461_sorted_labels_V_ce1,
        sorted_labels_V_we1 => grp_sort_knn_fu_461_sorted_labels_V_we1,
        sorted_labels_V_d1 => grp_sort_knn_fu_461_sorted_labels_V_d1,
        sorted_labels_V_q1 => sorted_labels_q1);

    dut_mux_32_4_1_1_U52 : component dut_mux_32_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => freqs_0_V_reg_407,
        din1 => freqs_1_V_3_reg_396,
        din2 => freqs_2_V_3_reg_385,
        din3 => i3_0_reg_373,
        dout => tmp_4_fu_607_p5);

    dut_mux_32_4_1_1_U53 : component dut_mux_32_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => freqs_0_V_2_reg_363,
        din1 => freqs_1_V_2_reg_353,
        din2 => freqs_2_V_2_reg_343,
        din3 => tmp_3_fu_808_p4,
        dout => tmp_3_fu_808_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv4_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_return_preg <= sorted_labels_q0;
                end if; 
            end if;
        end if;
    end process;


    grp_sort_knn_fu_461_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sort_knn_fu_461_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_sort_knn_fu_461_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sort_knn_fu_461_ap_ready = ap_const_logic_1)) then 
                    grp_sort_knn_fu_461_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    freqs_0_V_2_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_538_p2 = ap_const_lv1_1))) then 
                freqs_0_V_2_reg_363 <= freqs_0_V_0_fu_106;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln171_fu_596_p2 = ap_const_lv1_1))) then 
                freqs_0_V_2_reg_363 <= freqs_0_V_6_fu_683_p3;
            end if; 
        end if;
    end process;

    freqs_0_V_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                freqs_0_V_reg_407 <= select_ln879_2_fu_768_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                freqs_0_V_reg_407 <= freqs_0_V_2_reg_363;
            end if; 
        end if;
    end process;

    freqs_1_V_2_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_538_p2 = ap_const_lv1_1))) then 
                freqs_1_V_2_reg_353 <= freqs_1_V_0_fu_110;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln171_fu_596_p2 = ap_const_lv1_1))) then 
                freqs_1_V_2_reg_353 <= freqs_0_V_5_fu_675_p3;
            end if; 
        end if;
    end process;

    freqs_1_V_3_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                freqs_1_V_3_reg_396 <= select_ln879_1_fu_760_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                freqs_1_V_3_reg_396 <= freqs_1_V_2_reg_353;
            end if; 
        end if;
    end process;

    freqs_2_V_2_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_538_p2 = ap_const_lv1_1))) then 
                freqs_2_V_2_reg_343 <= freqs_2_V_0_fu_114;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln171_fu_596_p2 = ap_const_lv1_1))) then 
                freqs_2_V_2_reg_343 <= freqs_0_V_4_fu_659_p3;
            end if; 
        end if;
    end process;

    freqs_2_V_3_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                freqs_2_V_3_reg_385 <= select_ln879_fu_752_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                freqs_2_V_3_reg_385 <= freqs_2_V_2_reg_343;
            end if; 
        end if;
    end process;

    i3_0_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_538_p2 = ap_const_lv1_1))) then 
                i3_0_reg_373 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln171_fu_596_p2 = ap_const_lv1_1))) then 
                i3_0_reg_373 <= i_3_reg_1048;
            end if; 
        end if;
    end process;

    i_0_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_538_p2 = ap_const_lv1_0))) then 
                i_0_reg_332 <= i_fu_544_p2;
            elsif (((grp_sort_knn_fu_461_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_332 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_0_in_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_0_in_reg_430 <= j_reg_1069;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_in_reg_430 <= zext_ln169_reg_1040;
            end if; 
        end if;
    end process;

    p_022_0_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln169_fu_569_p2 = ap_const_lv1_1))) then 
                p_022_0_reg_439 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln182_fu_784_p2 = ap_const_lv1_0))) then 
                p_022_0_reg_439 <= select_ln183_fu_830_p3;
            end if; 
        end if;
    end process;

    t_V_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                t_V_reg_418 <= local_cnt_V_1_fu_776_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                t_V_reg_418 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    val_assign_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln169_fu_569_p2 = ap_const_lv1_1))) then 
                val_assign_reg_450 <= ap_const_lv2_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln182_fu_784_p2 = ap_const_lv1_0))) then 
                val_assign_reg_450 <= i_2_fu_838_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_3_reg_1048 <= i_3_fu_575_p2;
                    zext_ln169_reg_1040(1 downto 0) <= zext_ln169_fu_565_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_reg_1069 <= j_fu_590_p2;
                trunc_ln171_reg_1063 <= trunc_ln171_fu_586_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sorted_labels_load_1_reg_1058 <= sorted_labels_q0;
            end if;
        end if;
    end process;
    zext_ln169_reg_1040(31 downto 2) <= "000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln169_fu_569_p2, ap_CS_fsm_state6, icmp_ln171_fu_596_p2, ap_CS_fsm_state8, icmp_ln182_fu_784_p2, grp_sort_knn_fu_461_ap_done, ap_CS_fsm_state2, icmp_ln164_fu_538_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_sort_knn_fu_461_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln164_fu_538_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln169_fu_569_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln171_fu_596_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln182_fu_784_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_0_phi_fu_336_p4 <= i_0_reg_332;

    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(sorted_labels_q0, ap_return_preg, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_return <= sorted_labels_q0;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    freqs_0_V_0_fu_106 <= ap_const_lv4_F;
    freqs_0_V_3_fu_637_p3 <= 
        t_V_reg_418 when (icmp_ln321_1_fu_631_p2(0) = '1') else 
        freqs_0_V_reg_407;
    freqs_0_V_4_fu_659_p3 <= 
        freqs_2_V_3_reg_385 when (or_ln883_fu_645_p2(0) = '1') else 
        select_ln883_fu_651_p3;
    freqs_0_V_5_fu_675_p3 <= 
        freqs_1_V_3_reg_396 when (or_ln883_fu_645_p2(0) = '1') else 
        select_ln883_2_fu_667_p3;
    freqs_0_V_6_fu_683_p3 <= 
        freqs_0_V_reg_407 when (icmp_ln883_fu_619_p2(0) = '1') else 
        freqs_0_V_3_fu_637_p3;
    freqs_1_V_0_fu_110 <= ap_const_lv4_F;
    freqs_2_V_0_fu_114 <= ap_const_lv4_F;
    grp_sort_knn_fu_461_ap_start <= grp_sort_knn_fu_461_ap_start_reg;
    i_2_fu_838_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(val_assign_reg_450));
    i_3_fu_575_p2 <= std_logic_vector(unsigned(i3_0_reg_373) + unsigned(ap_const_lv2_1));
    i_fu_544_p2 <= std_logic_vector(unsigned(i_0_reg_332) + unsigned(ap_const_lv2_1));
    icmp_ln164_fu_538_p2 <= "1" when (i_0_reg_332 = ap_const_lv2_3) else "0";
    icmp_ln169_fu_569_p2 <= "1" when (i3_0_reg_373 = ap_const_lv2_3) else "0";
    icmp_ln171_fu_596_p2 <= "1" when (j_0_in_reg_430 = ap_const_lv32_2) else "0";
    icmp_ln182_fu_784_p2 <= "1" when (val_assign_reg_450 = ap_const_lv2_3) else "0";
    icmp_ln321_1_fu_631_p2 <= "1" when (i3_0_reg_373 = ap_const_lv2_0) else "0";
    icmp_ln321_2_fu_702_p2 <= "1" when (trunc_ln171_reg_1063 = ap_const_lv2_0) else "0";
    icmp_ln321_3_fu_715_p2 <= "1" when (trunc_ln171_reg_1063 = ap_const_lv2_3) else "0";
    icmp_ln321_fu_625_p2 <= "1" when (i3_0_reg_373 = ap_const_lv2_1) else "0";
    icmp_ln879_fu_691_p2 <= "1" when (sorted_labels_load_1_reg_1058 = sorted_labels_q0) else "0";
    icmp_ln883_fu_619_p2 <= "1" when (tmp_4_fu_607_p5 = ap_const_lv4_0) else "0";
    icmp_ln895_2_fu_790_p2 <= "1" when (val_assign_reg_450 = ap_const_lv2_1) else "0";
    icmp_ln895_fu_820_p2 <= "1" when (unsigned(select_ln895_fu_796_p3) > unsigned(tmp_3_fu_808_p5)) else "0";
    j_fu_590_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(j_0_in_reg_430));
    local_cnt_V_1_fu_776_p3 <= 
        local_cnt_V_fu_696_p2 when (icmp_ln879_fu_691_p2(0) = '1') else 
        t_V_reg_418;
    local_cnt_V_fu_696_p2 <= std_logic_vector(unsigned(t_V_reg_418) + unsigned(ap_const_lv4_1));
    max_idx_V_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_reg_450),4));
    or_ln883_fu_645_p2 <= (icmp_ln883_fu_619_p2 or icmp_ln321_1_fu_631_p2);
    select_ln183_fu_830_p3 <= 
        max_idx_V_fu_826_p1 when (icmp_ln895_fu_820_p2(0) = '1') else 
        p_022_0_reg_439;
    select_ln321_1_fu_720_p3 <= 
        freqs_2_V_3_reg_385 when (icmp_ln321_3_fu_715_p2(0) = '1') else 
        select_ln321_fu_707_p3;
    select_ln321_2_fu_728_p3 <= 
        ap_const_lv4_0 when (icmp_ln321_2_fu_702_p2(0) = '1') else 
        freqs_1_V_3_reg_396;
    select_ln321_3_fu_736_p3 <= 
        freqs_1_V_3_reg_396 when (icmp_ln321_3_fu_715_p2(0) = '1') else 
        select_ln321_2_fu_728_p3;
    select_ln321_4_fu_744_p3 <= 
        ap_const_lv4_0 when (icmp_ln321_3_fu_715_p2(0) = '1') else 
        freqs_0_V_reg_407;
    select_ln321_fu_707_p3 <= 
        freqs_2_V_3_reg_385 when (icmp_ln321_2_fu_702_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln879_1_fu_760_p3 <= 
        select_ln321_3_fu_736_p3 when (icmp_ln879_fu_691_p2(0) = '1') else 
        freqs_1_V_3_reg_396;
    select_ln879_2_fu_768_p3 <= 
        select_ln321_4_fu_744_p3 when (icmp_ln879_fu_691_p2(0) = '1') else 
        freqs_0_V_reg_407;
    select_ln879_fu_752_p3 <= 
        select_ln321_1_fu_720_p3 when (icmp_ln879_fu_691_p2(0) = '1') else 
        freqs_2_V_3_reg_385;
    select_ln883_2_fu_667_p3 <= 
        t_V_reg_418 when (icmp_ln321_fu_625_p2(0) = '1') else 
        freqs_1_V_3_reg_396;
    select_ln883_fu_651_p3 <= 
        freqs_2_V_3_reg_385 when (icmp_ln321_fu_625_p2(0) = '1') else 
        t_V_reg_418;
    select_ln895_fu_796_p3 <= 
        freqs_1_V_2_reg_353 when (icmp_ln895_2_fu_790_p2(0) = '1') else 
        freqs_2_V_2_reg_343;
        sext_ln172_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_fu_590_p2),64));


    sorted_labels_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, grp_sort_knn_fu_461_sorted_labels_V_address0, ap_CS_fsm_state2, zext_ln172_fu_581_p1, sext_ln172_fu_602_p1, zext_ln544_fu_844_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sorted_labels_address0 <= zext_ln544_fu_844_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sorted_labels_address0 <= sext_ln172_fu_602_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sorted_labels_address0 <= zext_ln172_fu_581_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sorted_labels_address0 <= grp_sort_knn_fu_461_sorted_labels_V_address0;
        else 
            sorted_labels_address0 <= "XXXXX";
        end if; 
    end process;


    sorted_labels_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, grp_sort_knn_fu_461_sorted_labels_V_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            sorted_labels_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sorted_labels_ce0 <= grp_sort_knn_fu_461_sorted_labels_V_ce0;
        else 
            sorted_labels_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_labels_ce1_assign_proc : process(grp_sort_knn_fu_461_sorted_labels_V_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sorted_labels_ce1 <= grp_sort_knn_fu_461_sorted_labels_V_ce1;
        else 
            sorted_labels_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_labels_we0_assign_proc : process(grp_sort_knn_fu_461_sorted_labels_V_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sorted_labels_we0 <= grp_sort_knn_fu_461_sorted_labels_V_we0;
        else 
            sorted_labels_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sorted_labels_we1_assign_proc : process(grp_sort_knn_fu_461_sorted_labels_V_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sorted_labels_we1 <= grp_sort_knn_fu_461_sorted_labels_V_we1;
        else 
            sorted_labels_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_808_p4 <= p_022_0_reg_439(2 - 1 downto 0);
    trunc_ln171_fu_586_p1 <= j_0_in_reg_430(2 - 1 downto 0);
    zext_ln169_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_373),32));
    zext_ln172_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_373),64));
    zext_ln544_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_022_0_reg_439),64));
end behav;
